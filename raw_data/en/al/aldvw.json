{"title": "PDF", "author": "PDF", "url": "www.cs.unc.edu/~samarjit/papers/tecs2020a.pdf", "hostname": "PDF", "description": "PDF", "sitename": "PDF", "date": "PDF", "cleaned_text": "1 Energy Modeling for the Bluetooth Low Energy Protocol PHILIPP H. KINDT, Technical University of Munich (TUM), Germany DANIEL SAMARJIT CHAKRABORTY, University of North Carolina at Chapel Hill (UNC), USA Bluetooth Low Energy (BLE) is a wireless protocol optimized for low power communication. To design energy-efficient devices, the protocol provides a number of parameters that need to be optimized within an energy, latency and throughput design space. Therefore, an energy-model that can predict the energy consumption of a BLE-based wireless device for different parameter value settings is needed. As BLE differs from the well-known Bluetooth Basic Rate (BR) significantly, models for Bluetooth BR cannot be easily applied to the BLE protocol. Within the last years, there have been a couple of proposals on energy models for BLE. However, none of them can model all the operating modes of the protocol. This paper presents an energy model of the BLE protocol, which allows the computation of a device's power consumption in all possible operating modes. To the best of our knowledge, our proposed model is not only one of the most accurate ones known so far (because it accounts for all protocol parameters), but it is also the only one that models all the operating modes of BLE. Based on this model, guidelines for system designers are presented, that help choosing the right parameters for optimizing the energy consumption. The model is publicly available as a software library for download. ACM Reference Format: Philipp H. Kindt, Daniel Yunge, Robert Samarjit Chakraborty. 2020. Energy Modeling for Bluetooth Low Energy Protocol. ACM Trans. Embedd. Comput. Syst. 1, 1, Article 1 (January 2020), 31 pages. https://doi.org/10.1145/3379339 1 INTRODUCTION Optimizing energy consumption is a crucial design requirement in many wireless sensor networks. Long battery lifetimes are especially important for body-worn medical sensors, mobile phones and interface devices, such as wireless mice. The Bluetooth Low Energy (BLE) protocol [ 23] was introduced in 2010 for providing low-power wireless connectivity in such applications. It has become very popular over the past 10 years and is widely used today in a variety of devices. BLE- based sensors are able to operate on a coin cell for several months to several years [ 11], depending on their processing and communication demands and the parametrization of the (BLE) protocol. The protocol leaves open a large degree of freedom in terms of choosing the parameter values. Such parametrizations have a significant impact on the power consumption of the device. As a result, appropriate parameter optimizations are an important part of the design process. Authors' addresses: Philipp H. Kindt, philipp.kindt@tum.de, of North Carolina at Chapel Hill (UNC), USA. Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. \u00a92020 Association Embedd. Comput. Syst., 1. Publication date: January 2020.1:2 Philipp H. Kindt et al. In this paper, we present a comprehensive energy model for BLE in all its possible modes of operation. Our work integrates existing models for BLE and makes a number of new contributions: (1) Our model takes into account allrelevant operating modes (i.e., connected communication, non-connected communication and the connection establishment procedure) and parameters of the protocol, whereas all known models till date only capture a limited set of operating modes. Towards this, we combine, refine and extend a number of recently proposed energy models for BLE. (2)We analyze the variations of parameter values and perform a sensitivity analysis to study their impact on power consumption. (3)We validate the model through detailed experiments, viz., by comparing the results from our proposed model with those obtained from measurements. The maximum error between predicted and measured current was 3.4 %. Such comparisons have not been done for any of the previously proposed energy models, baring one exception in [ 18], where only one mode was studied. Our model helps in finding the right parametrizations, since the impact of different parameter values on the energy consumption can be studied. Measuring the current of BLE using some configurations and simply extrapolating these results for deriving the best parametrization is often not possible, since some relations between parameters and energy consumption are non-linear. The rest of this paper is organized as follows. In Section 2, we give a short introduction to the BLE protocol. Related previous work and our contributions are described in Section 3. We then present our proposed energy model for BLE in Section 4. This model is compared against simulations and real world measurements in Section 5. In Section 6, the model is used to provide guidelines for appropriate parametrization of the protocol in different scenarios. To ease the understanding of the equations we present in this paper, a table of symbols is provided in the appendix. 2 THE BLE PROTOCOL In this section, we summarize the main features of the BLE protocol that are relevant for our proposed energy model. More details may be found in the BLE specification [ 23]. BLE is designed to maximize the fraction of time during which a device can stay in a sleep mode. Consider two devices that attempt to communicate with each other. First, both devices need to discover each other. Towards this, one device periodically sends so-called advertising (ADV) packets, whereas the other device scans for these packets. As soon as the scanner has received at least one advertising packet, it can go to the initiating state for establishing a connection. In this state, handshaking packets are exchanged. Upon success, both devices go into the connected state, in which the former advertiser becomes the slave and the former scanner becomes the master. In a connection, the master controls the timing and both devices can exchange data in a time-sliced and hence energy-efficient manner. For the purpose of our model, we distinguish between the connected mode, the non-connected mode and the establishment of a connection. For the sake of simplicity of exposition, we consider BLE piconets with only two participating devices. For multiple devices, the following two limitations apply. First, if a connection master maintains multiple slaves, whenever the connection events from two slaves overlap in time, only one of them can be served by the master, which might impact the energy consumption. Second, if multiple devices attempt to discover each other simultaneously (see below for details on this procedure), their beacons will collide with a certain probability. Hence, the connection setup will take longer than predicted by our model in such cases. Non-Connected Communication. Non-connected communication is mainly used for neighbor dis- covery. In addition, small amounts of data can be exchanged between two devices without requiring a prior synchronization. Here, one device is in the advertising mode and the other one is in the ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:3 (a) Advertising and scanning in BLE. (b) Connection establishment packet flow. Fig. 1. Connection Setup in BLE. scanning mode. Advertising and scanning take place as shown in Figure 1(a): An advertising device periodically sends out advertising packets. A group of consecutive packets form an advertising- or ADV-event . In each of these advertising events, an advertising packet is sent on at least one of three dedicated adverting channels. Which subset of the three channels is to be used is determined by the application. Advertising events occur regularly with the advertising interval Ta. Independently from this, a scanner periodically switches on its receiver for a duration of dstime units, called thescan window . This is repeated at every interval Ts, called the scan interval . In the next period, the scanner hops to the next advertising channel and again listens for advertising packets. The specification [ 23] requires the scanner to use all three advertising channels. If the scanner receives an advertising packet, it may send a response packet to the advertiser within the same ADV-event. The advertiser expects a response on the same advertising channel dI F S=150\u00b5safter the end of the advertising packet. dI F Sis called the interframe-space . The advertising interval is composed of a static interval Ta,0and a random part , i.e., Ta=Ta,0+, whereis a random amount of time between 0 ms and10 ms . Whenever we refer to a certain value of the advertising interval, this value actually corresponds to the static component Ta,0, which can be chosen by the host within certain boundaries. The random offset is added to Ta,0mainly to mitigate the effect of collisions. If two devices chose the same Ta,0and one pair of packets collides, all subsequent ones would also collide without the offset . Connection Establishment. A connection can be established after a device has been detected by advertising/scanning. After having received at least one advertising packet, the scanner sends a connection-request packet dI F Stime units later. This packet contains two parameters called transmitWindowOffset dtwoandtransmitWindow dtwthat determine the timing of the connection establishment procedure. In doing so, the scanner is in the initiating state and is therefore called the initiator . The durations dtwanddtwoaffect the connection establishment procedure, as depicted in Figure 1(b) .1.25 ms +dtwotime units after the end of the connection-request packet, the transmit window starts, in which the initiator may schedule its first regular connection event. The constant value of 1.25 ms is defined by the BLE specification. The initiator may schedule the first connection event an arbitrary amount of time tpafter the beginning of the transmit window. The point in time of this first even is called tAnchor . The advertiser has to listen during the entire transmit window until there is a successful reception. Afterwards, the connection is valid and data can be exchanged. As described in the next section, in the connected mode, data is transmitted periodically with theconnection interval Tc. The procedure described for connection establishment is also used by the master for changing the parameters of an existing connection, with the following minor modifications. In a regular connection event, the master sends the new values for Tcalong with other updated parameters to the slave. The transmit window for the first packet being affected by the new parameter values starts dtwo+Tc,otime units after the transmission of the connection update packet has started. Tc,ois the connection interval before the parameter update procedure. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.1:4 Philipp H. Kindt et al. Connected Communication. During the connection establishment phase, both devices have agreed on a connection interval Tcthat determines the period with which the connection events occur. In addition, there is an anchor point tanchor that both devices have been synchronized on. At tanchor +kTc,0k, both devices have to be awake and Mwill send a packet. Swill then acknowledge it by sending another packet 150\u00b5slater, which might be either an empty response, a payload packet, or a packet performing control functions. If there is more data to be transmitted, more pairs of packets are exchanged in the same manner, separated from each other by dI F Stime units. Apart from pre- and postprocessing, the device may sleep during all other times. In addition, there is a parameter called the slave latency Nsl, which increases the sleep duration of Sin case there is nothing to signal in a connection event. If MandShave agreed on a slave latency of Nsl, the slave might skip Nslconnection events without waking up. The connection interval Tcmust range from 7.5 ms to4.0 sandNslmay be up to 500 events. 3 RELATED WORK Performance Modeling of BLE: The performance of BLE, including its energy consumption, has been extensively studied in the literature. In [ 7], an energy-model for Bluetooth BR/EDR in thesniff mode was presented, that cannot easily be applied to BLE due to differences between the two protocols. For BLE, different models have been presented. The maximum throughput of BLE was modeled in [ 8], taking into account a given bit error rate. In [ 11], Texas Instruments provided guidelines on measuring the current consumption of its CC2540 BLE device in the connected mode by measuring the current consumption of the partial events and summing them up. Based on this, TI provided an estimate for the battery lifetime. By entering the measured event currents and the durations into an Excel sheet provided by TI, the average current consumption may be calculated. This has been the first step towards an energy model for BLE, which only took the connected mode into account. Other manufacturers of BLE SoCs have published comparable tools. Further, in [ 29], an energy model in the connected mode similar to TI's scheme was presented and evaluated for different protocol parameters. Another event-based model was presented for advertising events in [18]. Further previous studies on the performance evaluation of BLE, which included aspects like energy consumption, latency, memory requirements of the BLE stack, throughput and maximum piconet size [ 9], [21], [22] have been published. However, none of these models cover all modes of operation, including non-connected communication, connection establishment, and connected communication. All of these modes contribute to the overall energy consumption. For example, to the best of our knowledge, there has been no known model for the connection setup procedure and for connection parameter updates previously to this work. Combining different previously known models into a holistic one and complementing the missing parts is not feasible, since the assumptions underlying the different models are not consistent. For example, [ 11] subdivides a BLE connection event into 8 distinct phases, whereas [ 21] assumes only 5. In our proposed model, the methodology and assumptions are consistent for individual parts of the model and allmodes of operation are covered in the same manner. To the best of our knowledge, results from any of the previously proposed models have not been compared to measured power curves, bearing one exception that is limited to neighbor discovery [ 18]. Consequently, the accuracy of these models is not clear. Our measurements reveal that our model is in close proximity with the measured current consumption. The error for the average current consumption per connection interval we measured in our experiments was 3.4 %(cf. Section 5.1). Compared to the models presented in the literature, our model has the following advantages: (1)To the best of our knowledge, we present the first model that accounts for i) all possible modes of operation, ii) all relevant parameters, and iii) all possible parameter values of the BLE protocol. For example, our proposed model is the first one that can model the energy ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:5 consumption for the connection setup procedure, for updating the connection parameters and for neighbor discovery using all possible parameter values. (2)Using multiple measurements, we identify the degree of variation in the values of different model parameters. We further analyze their impact on the overall power consumption. (3)To the best of our knowledge, the outputs of none of the known energy models for BLE have been compared to measured data yet, bearing one exception presented in [ 18], where the energy consumption of an advertiser for neighbor discovery was modeled and compared to measured data. We have therefore validated the results from our proposed model with real experimental results. (4)To the best of our knowledge, the energy model proposed in this paper is the only one for which the source-code has been made publicly available [ 13] in the form of a C-library, which can e.g., be included in commonly used network simulation environments. Neighbor Discovery in BLE: Besides connected communication, neighbor discovery also con- tributes to the energy consumption of BLE. Energy models for this case are more complex than for the connected mode, as neighbor discovery in BLE is a probabilistic procedure. Nevertheless, this has been addressed for the STEM-B - protocol, in which neighbor discovery is done in a similar way as in BLE. A model for this was presented in [ 28] and applied to BLE in [ 18], [20] and [ 19], predicting the discovery latency and energy-consumption of the advertiser in a neighbor discovery procedure. However, as stated in [ 19], this model is only valid for a certain range of possible parameter values (Ta,0<ds10 ms orTs=ds, as defined in Section 2). The first of these parametrizations implies that the time between any two adjacent advertising packets is always smaller than the length of a scan window. The second one implies that the receiving device is always scanning. In these two cases, the analysis is significantly simplified. However, they capture only a very small part of the whole design space (cf. Figure 8, where we have highlighted the parametrizations for which Ta,0<ds10 ms ). Another model for the neighbor discovery latency of BLE has been presented in [ 5], [4]. The main assumption underlying this model is that the reception probability of every packet remains constant within all advertising intervals. However, this assumption does not hold true in practice: E.g., let us consider a case in which Ts=2\u00b7Ta. Here, if one packet overlaps with a scan window, the next one obviously cannot overlap with it. Since this model does not account for correlated reception probabilities among multiple packets, it cannot not predict valid discovery latencies. In [10], another model for the neighbor discovery latency of BLE has been presented. It is based on quantizing the range of initial offsets between the advertiser and the scanner into multiple, fixed-length slots. Because of the finite length of each slot, in combination with the necessity to round the advertising interval to the next integer number of slots that is coprimal to the scan interval, this model can only approximate the actual discovery latencies. Further, short slot lengths lead to very large computation times, since for every slot, the modular multiplicative inverse of two intervals needs to be computed. The random delay that the BLE specification requires is not accounted for. An analytical, closed-form model for the neighbor discovery latency of BLE-like protocols has been presented in [ 12]. However, this model only accounts for one channel and also neglects the random delay . Therefore, as stated in [ 12], it approximates the mean latencies well for most values of Ta,0,Tsandds, but can lead to unbounded errors for some values. A common strength of both [ 12] and [ 10] is the capability to infer upper bounds on the discovery latencies, which however are not valid for BLE in practice, since the random delay is not accounted for. The energy consumption of a BLE advertiser has been analyzed in [ 27]. While [ 27] does not consider the neighbor discovery procedure of BLE and its associated energy consumption, it focuses on analyzing single advertising events of different BLE SoCs. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1. Publication 2020.1:6 Philipp H. Kindt et al. PrecisionTa,0 ds10 ms3 Chan Rnd. Delay Lat. Bound Complexity Ours Approx medium Simulations Approx high Liu [19] Exact negligible Cho [5] - negligible Jeon [10] Approx medium Kindt [12] Exact low Table 1. Precision, ability to model cases with Ta,0ds10 ms , 3-channel discovery, the random delay , ability to infer an upper latency bound, computational complexity of known BLE neighbor discovery models. Table 1 summarizes the capabilities of different models. It is worth mentioning that the precisions presented in this table are only valid for the features the models support (i.e., the capability to model cases with Ta,0>ds10 ms , to account for all 3channels, to account for the random delay in BLE). E.g., the model in [ 12] can give exact estimates to problems on one channel without the random advertising delay, but cannot model the actual BLE neighbor discovery problem precisely. Despite most of these models having appeared after our proposed one, none of them can account for the random delay of the BLE protocol, which would require fundamentally different approaches. Hence, our model is the only one that can estimate the mean discovery latency of the unmodified BLE protocol, including the random delay, accurately for all parameter values. Usage of our Model: A preliminary version [ 15] of this paper has been available as a technical report. In the meantime, it has gained considerable attention in the scientific community. Multiple works rely on the model presented in this paper and some of them have proposed extensions to it. The following works extend our model for the BLE neighbor discovery procedure. An extension to account for different definitions of the discovery latency has been proposed in [ 16]. Since our proposed model contains a tunable parameter that is used for trading modeling accuracy against computational complexity, [ 16] has experimentally evaluated the accuracies obtained for different values of this parameter. Further, [ 6] presents a version of our proposed model that reduces the computational complexity, but achieves lower accuracies for most parameter values. In summary, while the form of the model presented in this paper covers the most common notion of the neighbor discovery procedure of BLE, these works have extended the model towards other use-cases. Other work makes use of our model for energy estimation in the connected mode. An attempt to partially port our model into an Excel-sheet has been described in [ 2]. Other works, e.g., [ 26], [17] or [14], apply our energy model for estimating energy consumptions or make use of conclusions obtained from our model (e.g., [1]), but do not extend or refine the model itself. 4 BLE ENERGY MODEL In this section, we present a comprehensive energy model for BLE that is capable of predicting the energy-consumption of the protocol in all modes of operation. 4.1 Overview Figure 2 gives an overview on our approach. Exchanging packets in BLE takes place in so-called events and hence, the protocol can be modeled as a temporal sequence of events that take place periodically. Energy models of these events depend on their types (connection- , advertising- or scan events), as can be seen on the left in Figure 2. The dotted boxes in the figure depict protocol parameters that are fed into the model. In Stage 1) of Figure 2, the energy of all events that occur is estimated. In Stage 2), the average duration dadvof the BLE neighbor discovery procedure is modeled for the advertising/scanning ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:7 Fig. 2. High-level diagram of the BLE energy model. The dotted boxes denote BLE protocol parameters used by the model. mode. This duration is of probabilistic nature. It determines how often an advertising event or scan event has to be repeated before the data (either payload or handshaking for the initialization of a connection establishment procedure) has successfully been received. In the third stage, the number of identical events that occur within a certain amount of time is calculated. Next, the energy consumed per event is multiplied by the number of times it occurs and the results for different events are then summed up. In the following, we describe every block in Figure 2. In addition, we describe an energy model for the connection establishment procedure, which is not shown in the figure. This procedure occurs whenever the scanner/initiator has discovered its remote device and establishes a connection or connection parameters are to be updated in an existing connection. 4.2 Event Model 4.2.1 Connection/Advertising Events. In this section, we present a model for connection events. As already mentioned, the energy consumption of an advertising event can be modeled similarly, as both events draw similar currents. Therefore, the model for connection events of a master, as described in this section, can also be used to model advertising events. A previous energy model for connection events in BLE has been presented in [ 29]. In our model, we extended this by taking into account window widening, non-ideal durations, a communication preamble and correction terms to account for distortions of the current curve caused by resistive and capacitive elements in the power supply line. This is done for achieving the maximally possible accuracy. Most devices (e.g., Bluegiga BLE112/TI CC2540) make use of a linear voltage regulator, which keeps the current consumption independent from the supply voltage. For this reason, we present all parameter values of our model in terms of electric current Iin Ampere and electric charge Q in Coulomb. From these values, the power- and energy-consumption can be easily obtained for a given supply voltage. The description in this section is made for a BLE slave. For a master, the rx- andtx-phases described below are interchanged and no window-widening occurs. Within a connection event, ten distinguishable phases with nearly constant current consumption can be identified, as shown in Figure 3. These phases are as described next. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.1:8 Philipp H. Kindt et al. Fig. 3. Model for a BLE connection event of a slave device. The waveform is not true to scale and hence, no values are marked on the axes. (1)Header ( head):At the beginning of a connection event, the device wakes up. Thereby, a current Ihead is consumed for the duration of dhead. (2)Preprocessing ( pre):Prior to the actual communication, the device wakes up and prepares the functions related to the BLE standard, which are used during communication, such as the logical link control and adaptation protocol (L2CAP), generic access profiles (GAP), generic attribute profile (GATT), security manager (SM), etc. While the average current is nearly constant over time during this phase, its duration might vary depending on the BLE device, the BLE stack and the BLE functionality that is used (e.g., sending attributes with or without confirmation). In addition, random variations occur (see Appendix A for details). (3)Communication preamble ( cpre):The wireless communication is initiated in this phase. The current and duration in this phase may change with different BLE device models. (4)Window widening ( ww):The slave has to start listening for a certain amount of time before the master starts sending its first packet to compensate for the time drift that might be generated due to clock skew. This additional time is called window widening dww. It depends on the nominal sleep clock accuracy (SCA) of each transceiver, the connection interval Tc and the average slave latency Nsl, as shown in Equation (1). The sleep clock is the clock that determines the points in time for waking up a sleeping device. The current magnitude of this phase is the same as the magnitude of the rx-phase. The duration dwwcan be calculated according to Equation (1) [ 23], assuming that the average clock skew is equal to zero (positive and negative skew compensate for each other). (5)Reception ( BLE is specified to be 1 MBits/s, therefore one bit is transmitted within 1\u00b5s. Consequently, the rx-phase should ideally take Nrx\u00b78\u00b5s, with Nrx being the number of bytes received. Because the RF circuitry needs some time to initialize, the duration of the rx-phase is slightly longer than its ideal value. To account for this, a correction-offset dprerx is added to drxas in the equation below. drx=Nrx\u00b78\u00b5s+dprerx . (2) The current Irxis nearly constant; some devices, such as the CC2540 [ 25], have multiple reception-gain settings that cause different current draws. (6)Interframe-Space ( rxtx,txrx):After the rx-phase and before the slave starts sending a packet to the master, there is a phase for switching from reception to transmission and vice-versa. Its duration is slightly shorter than the over-the-air gap dI F Sbetween two packets. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:9 (7)Transmission( tx):In this phase, the slave transmits data to the master. Its duration can be modeled in a manner similar to the rx-phase using Equation (3). dtx=dpretx +Ntx\u00b78\u00b5s (3) Ntxis the number of bytes transmitted. The current consumption Itxdepends on the tx-power that is used. In addition, Itxslightly varies with the channel a packet is sent on. As the channel is determined by a pseudo-random hopping sequence, these variations can be assumed to occur randomly with a given standard deviation. The BLE protocol allows the transmission of multiple pairs of packets in a single connection event. After another txrx-phase, the rx, rxtx andtx-phases might be repeated to account for multiple pairs of packets. We evaluate such events with more than one pair of packet in Section 6.3. (8)Tx transient ( tra):After the data transmission has ended, the current decreases from Itxto the postprocessing-current Ipost. Whereas the current consumption drops with a RC curve, an effective constant current Itraand an effective duration dtracan be chosen appropriately to take the charge consumed by this into account. (9)Postprocessing ( post):After the communication has ended, the device may execute addi- tional tasks, e.g., wired communication to a host processor or data buffering for the next transmission. Therefore, the duration of this phase is strongly dependent on the BLE device and its firmware. In our experiments, we measured the post-processing duration caused by a firmware created with Bluegiga's BGScript [ 3] without accounting for additional tasks. Both on BLE112- and CC2540-devices, dpostis subjected to strong random variations [ 11]. When executing one BLE functionality (e.g., sending a packet), we measured varying postprocessing times, as presented in the tables in Appendix A. (10)Tail ( tail):After the BLE device has completed the tasks related to the post-processing, it goes to a sleep mode to reduce the energy consumption. This phase in the model accounts for the current consumed for initiating the low power mode. The phase durations observed in the over-the-air traffic differ from those in a measured current waveform. Here, we consider the phase durations of the current draw, since they determine the energy consumption. For each phase ph, the charge consumed can be calculated by Qph=dphIph. With the phases described, the charge consumed for a connection event, QcE, can be computed as in Equation (4). QcE=Qhead+Qpre+Qcpre+Qww+Qt+Qtra+Qpost+Qtail (4) Qtaccounts for the actual communication taking place. For a communication with Nseqpairs of packets, it is Qt=Nseq\u00d5 i=1(Qrx(i)+Qtx(i)+Qrxtx+Qtxrx+Qto)Qtxrx (5) Qtois an offset to account for distortions in the current curve. Due to the distortion of the current curve caused by resistive and capacitive elements in the power supply line, the shape of the phases of the current curve are not perfectly rectangular. In phases with constant lengths, these distortions can be compensated for by using effective values. In contrast, for the communication sequence, an offset term needs to be added, as the varying durations make it impossible to find effective values. The duration of a connection event can be calculated similarly to Equation (4) by adding the partial durations of all phases. 4.2.2 Scan Event. The current waveform of a scan event depends on the actual scanning mode that is carried out (e.g., passive scanning or active scanning). We describe the energy consumption for an event with active scanning, which is the most complex waveform, and simplify it for events with no reception of data and for events which receive connection-request packets. In the equations in ACM Trans. Embedd. Comput. Syst., Vol. 1, No. Article 1. Publication date: January 2020.1:10 Philipp H. Kindt et al. Fig. 4. Current waveform of a scan event for active scanning. The waveform is not true to scale. this section, parameters denoted with an sindicate scanning , as the parameter values differ from the values in the connected mode. Figure 4 shows the current-waveform for active scanning, assuming that exactly one advertising event is received during one scan event. As for the connection event, the device wakes up, drawing a current for a duration of dpre ,stime-units. Afterwards, it scans for the scanning time dS,1until an incoming advertising packet is received, consuming a high current Iscan =Irx ,sdue to the permanent usage of the receiver circuit. During the reception of the packet, the current consumption remains the same. The device then switches from receiving to transmission, which takes drxtx ,samounts of time. Next, it sends a scan request packet lasting fordtx,s=Ntx\u00b78\u00b5s+dpretx ,stime units. Here, Ntxis the number of bytes sent and dpretx ,sis a correction offset accounting for charging and discharging capacitances. Afterwards, the devices switches from txtorx, taking the time dtxrx ,sand subsequently, a scan response packet from the remote device is received. This takes drxsr=Nrx\u00b71\u00b5s+dprerx ,stime units. Before the device continues scanning, there is another turnaround phase with a constant current for drxrx ,sunits of time. When the time dS,2has expired, the device stops scanning and goes to sleep, consuming a smaller current for the time dpost ,sbefore the sleep phase begins. The scan durations dS,1and dS,2depend on the time an advertising packet is received and are hence random. Fortunately, for calculating the energy consumption, only the sum of dS,1anddS,2is of interest, which is given by the scan window ds. It is approximately dscan=dsdrxtx ,sdtx,sdtxrx ,sdrxsrdrxrx ,s. Therefore, the charge consumed by a scan event with active scanning correction offsets to compensate for non-rectangular shapes in the reception and transmission phases. Parameter values for BLE112-devices are presented in Appendix A. In many cases, Equation (6) can be simplified. For sending a connection request packet, the waveform begins similarly to what is shown in Figure 4, but instead of a scan-request packet, a connection request packet is sent. In this case, the tx-phase is followed by the postprocessing phase without further sections in between. Our experiments showed that the pre- and post-processing phases for scanning with a connection request last longer than for active scanning on a BLE112-module. This behavior depends on the device and its BLE stack. For the sake of simplicity of explanation, we nevertheless assume these durations to be constant in the values presented in this paper, as this could easily be accounted for by adjusting the values to the given case. Because of the reduced number of phases in the case a connection is initiated, drxtx ,s,drx ,s,Qcrx ,sanddrxrx ,scan be set to zero and dscan is shortened to the time between the beginning of the idle scanning and the time the advertising packet has been received completely. If no advertising packet is received or only passive scanning is used, there is only idle-scanning (or the reception of advertising-packets, which consumes the same energy as idle-scanning) and the charge consumed can be computed in a simplified way: ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low QsEv,Idle=dpre ,s,i+dpost ,s,iIpost Ifdsis long compared to dpre+dpost, pre- and postprocessing can be neglected and the formula above can be simplified further. As pre- and postprocessing-durations and their effective currents differ significantly between active/idle scanning and scanning with establishing a connection, they are denoted with an index iforidle1. In many cases, it is hard to predict whether a scan event will receive an advertising packet or not and the point in time the reception takes place. For connection establishment, a solution for this problem is described in Section 4.3. For active scanning, discrete event simulations can be combined with the model described to get an estimate for the energy consumption. Another special case is continuous scanning ( ds=Ts): In this case, a scan event does not end with postprocessing, but the next rx,s-phase starts after dstime-units have passed, with a short phase for channel-changing that consumes a charge of dchch\u00b7Ichch in between. 4.2.3 Connection Procedure. In this section, we propose a model for the energy spent on establish- ing a connection and, as both procedures are similar, for updating the communication parameters of an existing connection. These procedures are described in Section 4.2.3 (cf. Figure 1(b)). To establish a connection, the master sends a connection request packet first, with the energy con- sumption associated with this event being Qev,cR ,Ma. For updating the parameter values of an existing connection, the master consumes Qev,cU ,Ma. Subsequently, there is no communication for i)dsl,cR=dtwo+1.25 ms after the end of the connection request packet in the case of a connection establishment, or ii) dsl,cU=dtwoafter the end of the old connection interval in the case of a connection parameter update. After that, the transmit window begins, as shown in Figure 1(b). Within the size of the transmit-window dtw, the master may schedule its first packet, thereby defining the anchor-point tAnchor for future connection events. With some constraints, the master is free to choose the transmit window offset dtwobetween 1.25 ms andTc,n, with Tc,nbeing the future connection interval. For the transmit window size dtw, the master can choose any value2in the following range. 1.25 ms <dtw<min(10 ms ,Tc,n1.25 ms) (8) With dp<dtwbeing the duration from the beginning of the transmit window to the time the first packet sent by the master, the charge consumed by the master for establishing a connection can be modeled as: QcE ,Ma=Qev,cR ,Ma+(1.25 ms +dtwo+dp)Isl QcU ,Ma=Qev,cU ,Ma+(Tc,o+dtwo+dpdev,cU ,Ma)Isl (10) Islis the sleep current of the BLE device. Tc,ois the connection interval before the connection parameter update took place. Qev,cR ,MaandQEv,cU ,Maare the charges consumed by the events the connection request/update packets are sent within. For an event with a connection request packet, these values can be modeled as described in Section 4.2.1 as an advertising event with 37 bytes sent by the advertiser and with a response of 44 bytes length sent by the scanner. Connection update requests can be modeled as a connection event with a 22-byte packet sent by the master, with packets received from the slave depending on the payload the slave has to send. The master's energy-consumption mainly stems from sending the connection request/update packet to the slave. Opposed to that, the energy consumption of the slave is dominated by the 1For the BLE112-stack, our measurements had the following limitations: 1) for scanning with connection-requests, only continuous scanning ( ds=Ts) was possible. 2) the time the device was actually scanning was slightly below ds. For scan windows between 12.5 ms and250 ms , it was approx. 1.85 ms shorter on the average over 1725 analyzed events. 2As integers are used for all parameters in BLE, the values of dtwanddtwo are quantized and must be a multiple of 1.25 ms . ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1. Publication date: January 2020.1:12 Philipp H. Kindt et al. current of its receiver during idle-listening in the transmit window and during the reception of the packet. It can be modeled by the following equations: consumed/duration spent by the event in which the connection request is sent. Similarly, Qev,cU ,Sl/dev,cU ,Slaccount for the event in which the connection update- packet is received. As Qev,cR ,Slis a scan event, it can be modeled according to Section 4.2.2, whereas Qev,cU ,Slis a connection event and can therefore be modeled according to Section 4.2.1. Irxis the current consumption when the receiver listens to the radio channel. The first connection event after this procedure has to be modeled without window widening, as the equations above already account for it. Nevertheless, window widening occurs in the procedure itself, which broadens the transmit window. dww ,cEanddww ,cUcontain the times the transmit window is broadened by. With SCA MaandSCA Slbeing the clock accuracies of master and slave in parts per million, the window-widenings for connection establishment dww (13) In Equations (9) and (10), we neglected the fact that the sleep duration is slightly shorter than what has been modeled, as the first event after the connection establishment or update partially overlaps with the sleep duration. However, due to the small sleep current of BLE devices, the impact of this is negligible. The values of dtw,dp,dtwoare chosen freely by the BLE stack and are therefore unknown, making the equations above hard to evaluate. However, a worst case-model can be defined. Both for the master and the slave, the maximum energy is consumed if both parameters have their maximum values, viz. dp=min(10 ms ,Tc,n1.25 ms)anddtwo=Tc,n. Moreover, even if not explicitly defined by the BLE specification, some assumptions on the values of these parameters can be made for real-world devices, that lead to an estimation of the average energy consumed for establishing a connection or updating the connection parameters. Both parameters are used to allow the master to schedule a new anchor point tAnchor . At this point in time, the first connection event of the new/updated connection starts. If the master already knows this point in time when sending the connection request/update packet to the slave, the first connection event can be scheduled by setting dtwoappropriately. In addition, dtwleaves open a time interval for the master to schedule the anchor point without determining it when sending the connection request or update packet. As there is no reason for the master for not being able to schedule tAnchor already when sending the connection parameters to the slave, we assume that it will always choose the smallest possible value of dtw(i.e.,min(10 ms ,Tc,n1.25 ms)). We further assume that every point in time within the transmit window is taken with the same likelihood. Hence, on an average, the master will schedule tAnchor at the middle of this interval, i.e. dp=dtw 2. If the master chooses small transmit windows ttw, there is a clear benefit for its energy consumption and as a consequence, an optimized BLE stack is likely to do so. However, making reasonable assumptions for the value of dtwois more difficult. dtwoonly influences the charge spent by sleeping and by window widening. The energy consumption related to this is negligible against the energy consumed for idle-listening within dtw and for receiving a packet. From an energy-perspective, the BLE stack can chose an arbitrary value. For energy modeling, dtwocan be assumed to have its maximum value Tc,n, if the actual value of the device is unknown. Whereas a coarse estimation of the energy consumed by the procedure described can be made using these assumptions, for more precise energy estimations, the parameters actually chosen by the BLE stack considered need to be analyzed. We analyzed the values chosen by the stack of a ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:13 Bluegiga BLE112-device using a Texas Instrument's packet sniffer software [ 24]. The corresponding setup is depicted in Figure 6(b). A passive BLE device was used to wiretap the BLE traffic between two different communicating devices. We developed a parser for the logs generated by the SmartRF Packet Sniffer software [24], allowing for the import of the sniffed data into MATLAB. By manually experimenting different parameter values, we found that dtw=3 ms is constant for all parameter values both for connection establishments and parameter updates. We further analyzed 26 connection procedures, where dphad an average value of 1.43 ms , which is close todtw 2, as we had assumed. dtwomay vary for different values of TCwhen establishing a new connection, while being constantly equal to zero for connection updates. We developed a software that repeatedly connected and disconnected two BLE nodes. The packet-sniffer-logs were analyzed to obtain dtwo for different values of Tc. The sniffer was able to measure time with a resolution of 1\u00b5s, and the measurement accuracy was mainly determined by the skew of the RC-oscillator on the BLE device. Assuming a clock accuracy of 50\u00b7106, the maximum skew would be 50\u00b5swithin a measured time period of 1 s. An analysis of about 12,000 connection procedures revealed the following results for a BLE112-device: dtwogrows with increasing values of Tc, but there are some random variations for the same value of Tc. The following approximations are based on a linear least squares fitting. For Tc>12.5 ms, an estimation for dtwois given by dtwo=Tc6.454 ms . The maximum deviation that occurred in all the measurements was 6.046 ms (i.e., 0.87 % of the corresponding measured value), the mean square error was 9\u00b5sand the standard deviation was2.959 ms . For 7.25 ms <Tc<12.5 ms, a good estimation for dtwois given by dtwo=0.389Tc+0.484 ms . Here, the mean square error that occurred in our measurements is 6.3\u00b5s, the standard deviation is2.527 ms and the maximum deviation is 5.140 ms (i.e., 51.4 %of the corresponding measured value). These values are valid for BLE112-devices in piconets with one slave. For other situations or different hardware, these measurements have to be repeated. 4.3 Neighbor Discovery / Advertising and Scanning Advertising and scanning in BLE were described in Section 2. During these phases, the advertiser (A) is not synchronized with the scanner (S) and the reception of a packet sent to the scanner by A is not guaranteed. Instead, the time after which a scanner receives an advertising packet needs to be described as a probabilistic process. In the following, we derive a model for the mean latency dadvuntil discovery occurs. Here, the discovery latency dadvis defined as the average time from the first advertising packet sent in range until there is a successful reception by the scanner. 4.3.1 Problem Definition. Figure 1(a) shows a typical advertising/scanning situation. A scanner S starts listening at its first scan event at time t=0. An advertiser Abegins advertising or comes into range after a random offset relative to the beginning of an arbitrary scan event. It periodically repeats its advertising event with period Ta=Ta,0+, wherebyis a random offset between 0 ms and10 ms . The question we address is: How much time will pass, until an advertising event \"meets\" a scan event for the first time? An advertising event iis received successfully by the scanner, if its starting time tais contained within a set of suitable times ti,suc. The hatched areas in Figure 1(a) on the left side of the scan events show the times dearlyan advertising event can begin before the scan event starts to be received successfully. The hatched areas at the right sides of the scan events show the times dlatethat do not lead to a successful reception while a scan event takes place. This is due to each advertising event consisting of three packets on three different channels. ti,sucis defined by the necessary and sufficient condition that the advertising packet on the channel the scanner is scanning on must overlap completely with a scan event. The interval ti,suc(tsE)for a given scan event at time tsEbegins dearlytime units before the beginning of the scan event tsEand ends dlatetime units ACM Trans. Embedd. Comput. Syst., Vol. No. Article 1. Publication date: January 2020.1:14 Philipp H. Kindt et al. Channel dearly dlate d dearlyanddlate and the effective scan window dsfor the three advertising channels [ 18].dais the duration of an advertising packet, dchthe duration of hopping to the next channel, as shown in Figure 1(a). before its end tsE+ds. If an advertising packet has the duration daand changing the channel takes dchamounts of time, dearlyanddlatedepend on the channel of the scan event and as given by Table 2 (cf. also [ 18]). As can be seen easily, the effective scan window d s=ds+dearlydlateis constant for all channels. In the following, we present an algorithm that estimates ti,sucand, based thereupon, the discovery latency dadvand the associated energy consumption. 4.3.2 Numeric Approximation. In general, the problem of calculating the expected discovery latency dadvis a complex probabilistic problem. Except for trivial special cases (i.e., Ta,0<ds10 ms and Ts=ds), to the best of our knowledge, no closed-form solution is known. Algorithm 1 provides an approximate value of the expected discovery latency dadv. It works as follows. Let us start with a given offset between a scan event and an advertising event. For this offset, we calculate the probability of a successful reception phit(n)of each advertising packet n sent at+n\u00b7Ta,0+,n=0,1, ..., given that all previous events have not been received by the scanner. Without the random advertising delay , this probability would be either 0 or 1 for each event - if the advertising begins within ti,suc, it is 1, for all other cases, it is 0. With a random offset , the time at which an advertisement event begins, tadvEvt, can lie within a broad time interval, which widens for increasing event numbers n. Therefore, phitdepends on n.is modeled as a random variable , having the distribution f()=( 1 10 ms, if010 ms 0 , else.(14) As the Bluetooth specification [ 23] only specifies the possible range of values for without sug- gesting its distribution, we thereby assume a uniform distribution. The time tadvEvtan advertising event begins can be modeled as in Equation (15): tadvEvt(n,)=+n\u00b7Ta,0| {z } A+n\u00d5 1 |{z} B(15) For calculating the probability phitof whether an advertising event is successfully received, the probability density function (PDF) tadvEvt(n,)for the starting time of an advertising event is required. For Term Bin Equation (15), the shape of the distribution depends on n. For n = 1, this distribution is uniform. As nrandom offsets occur, the resulting distribution can be described as the sum of nindependent and identical random variables . In general, the PDF of a sum of n random variables is the convolution product of their PDFs [ 30]. According to the central limit theorem for large n, the convolution product passes into a Gaussian distribution having the effective mean\u00b5=n\u00b5and the effective standard deviation =n[30]. Accordingly, for the distribution f(B)of B, we assume a Gaussian distribution with the mean \u00b5=n\u00b75 ms and standard deviation =p n/12\u00b710 ms for an arbitrary n>2. For n = 1, the uniform distribution from Equation (14) is used. For n = 2, we assume the distribution to be a symmetric triangular distribution with f(B)=f()f()(i.e., the exact solution of the convolution product). For the sake of simplicity of exposition, in this section, a Gaussian distribution is also assumed for n=1andn=2. However, the values we present in this paper have been calculated without using this simplification. The ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:15 Term Ain Equation (15) causes a shift of the mean of f(phit). The approximate distribution for the time tadvEvt(n,)is: f(tadvEvt(n,))= n\u00b7Ta,0n\u00b75 mspn 12\u00b710 ms! (16) (t)is the cumulative distribution function of the standard normal distribution. Therefore, phit can be calculated as in Line 9 of Algorithm 1 by evaluating f(tadvEvt(n,))for all scan intervals k the beginning of the advertising event tadvEvt(n)might lie within. The first scan event that might receive the advertising event nis given by kminand the last possible one is scan event number kmax. The indices kminandkmaxcan be calculated using the formulas in Line 5 of the algorithm. With tai being the ideal point in time an advertising-event starts (i.e. without the random advertising delay ),pkin Line 9 can be calculated. pk(k,n,tai,dearly,dlate,Ts)is the probability for the advertising event nbeing received successfully by the scanner. It can be calculated as follows. the expected latency for a given offset can be calculated as in Line 10 of the algorithm. pcM(n)is the probability that nadvertising events do not lead to a successful reception (cumulative miss probability). In Line 12 of Algorithm 1, the probability for ncumulative misses is calculated for the current advertising event under consideration. dexpin Line 10 is a good approximation of the exact expected discovery latency given a certain offset . With increasing values of n, the probability that one of the advertising events considered until so far is received successfully grows. Consequently, pcMshrinks with growing values of n. The algorithm finishes, if (1pcM)is smaller than a lower bound . The higher is, the better the accuracy of the algorithm becomes, but the corresponding computational complexity increases. Following the steps described above, the resulting values of dexpmust be integrated over all possible values of . We perform a simple numerical integration by evaluating the integral for [0,3\u00b7Ts]in steps of , multiplying the results with and computing the sum of these values. The variable chcontains the value of the current channel the scanner listens to and is calculated in Line 7 of the algorithm. The function getInterval(ch) used in the algorithm looks up dearlyand dlatefrom Table 2. The function dadvEvnt(ch)calculates the duration of an advertising event that is received successfully by the scanner on the current channel, as described in Section 4.2.1. This duration is given by dafor Channel 37. For Channel 38, it is 2da+dchand for Channel 39, it is 3da+2dch. In order to bound the computation time, the inner while-loop of Algorithm 1 should be aborted if dexpexceeds an upper bound dexp ,max. In practice, this is not a real limitation, since parametrizations leading to latencies larger than, for example, dexp ,max=1000 s are no reasonable choices for real world applications. The algorithm has two parameters andthat influence the accuracy of the results. The smaller is and the closer gets to 1, the more accurate the results become. Compared to discrete event simulations, this algorithm has a reduced complexity when choosing these values appropriately, as not all scan events need to be examined, and as different values forare accounted for implicitly by the Gaussian distribution. Figure 5 shows the modeled discovery latencies for different values of Ta,0and for different scan window lengths ds. It leads to some interesting observations: Smaller values of dslead to higher advertising latencies dadvfor all values of Ta,0. ForTa,0<d s10 ms , the function rises only slowly and there are no peaks. For some parameter values (for example, for Ta,0+5 ms =n\u00b7Ts), the expected advertising latency dadvbecomes very large. These are coupling phenomena. If the first advertising event ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.1:16 Philipp H. Kindt et al. Algorithm algorithm for Ts=3.12,=0.9999 ,=93.6 ms ,da=446\u00b5s,dch=150\u00b5s. The solid line in the bottom shows the results of the analytical model presented in [ 19] with Ts=2.56 sandds=1.28 s. does not hit a scan event and its advertising interval is for example close to the multiple of the scan interval Ts, the next advertising events have a high probability of also missing the scanner. For small scan windows ds, the number of coupling-peaks increases. In contrast, local minima exist, which lead to short discovery latencies dadv. Note that if Ta,0becomes smaller than the effective scan window length d s(d sis the scan window length accounting for dearlyanddlate, as given by Table 2) minus the maximum random delay of 10 ms , the distance between two subsequent advertising packets falls below the length of a contiguous reception phase and hence, no scan event can be missed. As a result, the latency becomes bounded. This area is highlighted by the frame in the lower left of Figure 5. A closed-form model for this special case has been presented in [ 19]. As can be seen, this previously known model does not apply for larger values of Ta,0. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:17 4.4 Computing the Number of Events In the previous sections, we have computed the charges consumed for every type of event in BLE. Further, in Section 4.2.3, we have computed the discovery latencies in advertising/scanning mode. The energy consumption of a device is given by relating the charges consumed by these events to their frequencies of occurrence. In this section, we first compute the frequency of occurrence in the connected mode, and then the average number of events needed for neighbor discovery. This results in the overall current consumption of a device. 4.4.1 Connected Mode. For a master, the number of connection events Nc,main a given amount of time Tis constant. For the slave, the number of connection events Nc,slis different as it may skip some events due to the slave latency parameter Nsl. With an average number of Nslskipped events, the number of events given by: Nc,sl=jT NslTck , Nc,ma=jT Tck (18) The overall charge consumption of the master or the slave per Tis the sum of the event energies and the sleeping energy: Qcon ,Ma/Sl=Nc\u00d5 n=1Qevent(n)+ TNc\u00d5 n=1devent(n)! Isl Nccan be set to the number of connection events for the master ( Nc=Nc,ma) or for the slave ( Nc=Nc,sl).Qeventcan be calculated according to Section 4.2 .Islis the sleep current of the device and devent(n)the duration of event n. 4.4.2 Advertiser. The energy consumption of one advertising event QadvEventcan be modeled as described in Section 4.2. For calculating the expected energy consumption Qadvfor a discovery procedure of the advertiser, it must be taken into account that not all advertising events are identical. Events that are successfully received might be shorter than the other events, since packets on different advertising channels are skipped after a successful reception and since the rx-phase takes longer due to receiving the response. Algorithm 1 can easily be extended for an estimation of the advertiser's energy. With Qadvbeing the expected energy of the advertiser, one could add the following assignment after Line 10 of Algorithm 1: QadvQadv+pkpcM((n1)(Qf ull+(Ta,0+5 msdf ull)Isl)+Qlast(ch)) Qf ullis the charge consumed by a full advertising packet that is sent on all three channels without receiving a response and df ullis its duration. Qlast(ch)is the charge of a packet that is successfully received on channel ch. It can be calculated according to Section 4.2. 4.4.3 Scanner. For assessing the charge spent during discovery by the scanner, one can modify Algorithm 1 as described above for the advertiser. An alternative is an approximation based on dadv, which works as follows. We assume that the advertiser starts advertising with a random offset with a maximum value of 3Tsfrom the beginning of the fist scan event. The power consumption of idle scanning before the advertiser starts advertising is not accounted for in the equations below. The expected energy consumption of the scanner Qsis is the expected number of scan events that occur within dadv.Qactive accounts for the time the scanner is actively scanning and Qsleep accounts for the sleep current Isl.QsEv,idleis the energy consumed by a scan event without receiving an advertising packet, as described in Section 4.2.2, neglecting the energy consumed by sending the response. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.1:18 Philipp H. Kindt et al. (a) Current Measurements (b) Time Measurements for Connection Setup Fig. 6. Measurement Setups Fig. 7. Modeled and measured energy consumption for sending a test sequence. The test sequence consists of packets with varying payloads between 0 and 20 bytes. Here, Tc=100 ms . 4.5 Parameter Extraction To obtain the parameter values needed for the model equations described, a semi-automatic procedure has been used for generating current waveforms and extracting the values. On a BLE112 device with a custom firmware created using BGScript [ 3], we altered the values of important protocol parameters, such as the number of bytes sent in each packet, and measured the waveforms of more than 5000 connection events. The measurements were taken according to [ 11] using a National Instruments NI PXIe-6124 data acquisition board (DAQ) with a sampling rate of 100 kHz . We calculated the current consumption I(t)of the chip by analyzing the voltage Vshunt(t)measured by the DAQ across a 10 \u00b11 %shunt resistor in the power supply of the BLE device, as depicted in Figure 6(a). The measured waveforms were analyzed using MATLAB scripts we developed. The model parameter values we obtained using these scripts are presented in Appendix A and B. 5 EVALUATION OF THE MODEL In this section, we discuss the validity of our model. Towards this, we conducted measurements both in the non-connected and connected mode and compare measured and modeled data. 5.1 Connected Mode To compare the modeled and the measured energy consumption in the connected mode, we set up a test scenario. The main goal of this scenario is to continuously vary important parameter values for obtaining comparisons over a large fraction of the whole design space. The scenario worked as follows. Two devices exchanged data using a connection interval Tcof100 ms . One device sent data with an attribute-write request, the other node acknowledged the data received. We did this comparison for both a master and a slave sending the payload. The payload sent varied continuously from 1 to 20 bytes, the number of packets sent per event was one per direction. The ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:19 number of total bytes received in a response was either 10 or 15, depending on the event. The sequence of connection events we had carried out repeatedly is as follows: (1)Send a packet with a payload sweeping between 0 and 20 bytes plus 17 bytes overhead and receive an empty polling packet with 10 bytes total length. (2)Send an empty polling packet with a total length of 10 bytes and wait for the acknowledgement packet with 15 bytes length. As the BLE112 device showed an unexpectedly long duration of the first rx-phase of each connection event when acting as a slave, we did not use the value of dprerx from the tables in the Appendix, but used the effective duration of dprerx =388\u00b5s3for the slave. To achieve high measurement accuracies, we scheduled the preparation of the packets using a separate task that was run periodically on the BLE module. The current waveforms generated by this task were filtered out. Even though we used high-quality measurement equipment, the bias current of the measurement device was larger than the sleep current of the BLE device. Therefore, on the average, its measured value was slightly negative. A Matlab script detected the points in time at which each connection event occurred in the measured current waveform and triggered the model to compute the charge consumed for the same event at the same point in the simulated time. Figure 7 shows the results of the experiment described. The curves depict the energy-consumption over time for a master and a slave, both computed with our proposed model and obtained by measurements. As can be seen, for the slave, the total error of the mean current predicted by our modelm=|ImeasuredImodel| Imeasuredis1.17 %. When only considering the connection-events without the sleep periods in between the events, the relative error mof the current is 3.5 %. If only the parts of an event beginning with the communication preamble and ending with the tx-transient phase are considered, mis5.1 %. This error is caused mainly by a missprediction of the rx-phase duration. As the error for the whole event is lower than that, some of the error is compensated by the pre- and postprocessing phases. In our test-scenario, we sent the payload and waited for a confirmation from the remote node, whereas we obtained the model-values in Appendix A for communication without confirmation. The confirmation causes a rise of the average pre- and postprocessing duration. By adjusting these values for sending with confirmation ( dpre=413\u00b5s,dpost=1077\u00b5s), the error of the whole event including the sleep current increases to 6.0 %, as the error-compensation described does not occur anymore. For the master, the overall error of the mean current in the test scenario mis3.4 %. Considering the connection events only, mis0.6 %. Therefore, the error for only the events is lower than for the slave. The parameter values in the tables of Appendix A have their maximum precisions for BLE slaves and differ slightly for a master. In particular, dCpre is longer for the master, but this error is compensated by the pre- and postprocessing phases. As a consequence, the higher overall error must be caused by the sleep current that we could not measure precisely, as described above. For the slave, this error further reduces the overall error by compensating overestimations of the events by the model. In conclusion, the error between the model and real-world measurements is low (less than 3.4%), which makes the model usable for energy estimations of practical applications. 5.2 Advertising/Scanning To verify the accuracy of the discovery latencies estimated by Algorithm 1, we compare its pre- dictions to measured latencies. The results from this comparison are depicted in Figure 8. The dashed curve shows the computed discovery latency dadvfor different advertising intervals Ta,0. In addition to this curve, which has been obtained by using Algorithm 1, each cross in the figure shows 3This value has been calculated based on our experiments and is valid on a BLE112 device for the first rx-phase of a connection event of a slave. A measurement with a CC2540-device with TI's BLE stack did not show such an abnormality. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1. Publication date: January 2020.1:20 Philipp H. Kindt et al. Fig. 8. Measured discovery latency compared to modeled values. Model ms mean value of 100 real-world measurements that have been repeated with the same parameter values. These measurements have been performed as follows. Two BLED112-modules have been connected to a PC and controlled by two separate processes on this PC. During all times, one module was scanning with a fixed set of parameters. As soon as a scan response was received, the process controlling this module sent the time of reception to another process controlling the second module. Inter-process communication was handled by Unix-Domain-Sockets. The process controlling the second module started the advertising procedures at random points in time between 0 sand3Tsand calculated the duration between the start of each advertising procedure and the first reception by the scanner. After having repeated this 100 times for one advertising interval, the average duration was computed and Ta,0was increased by 63.5 ms. This sequence was repeated until the maximum advertising interval was reached. Advertising intervals that lied within a coupling peak have been skipped to limit the wall-clock time of the measurement. As it can be seen in Figure 8, results from the measurements and results obtained from the model lie in close proximity. In addition to these real-world measurements, we have compared results obtained from the model to results from extensive discrete event simulations, which also confirmed the validity of our model. 6 RESULTS AND CONCLUSION 6.1 Sensitivity Analysis Some of the durations and current magnitudes of the individual phases in a connection event (e.g., post-processing or transmission) vary randomly. For example, the duration of the post-processing phase dpostis subjected to strong random variations. Another varying value is the current magnitude Itxin the transmission phase. If the standard deviations and the minimal/maximal values for the varying parameters are known, the impact of these variations on the overall current consumption within one connection interval can be determined. These variations are important for computing maximum, short-time current consumptions. In this section, we analyze the impact of variations of dpostandItxon the energy consumption in one connection interval. For other parameters, this sensitivity analysis can be done similarly. Given a phase ph,dmindphdmax,IminIphImax, the sensitivity Son the duration dphor current Iphof a phase is: S(dph)=Qtotal/dph S(Iph)=Qtotal/Iph (21) Qtotal is the total charge consumed within one connection interval, as calculated in Equation (19) with Nc=1. All parameter values can be assumed to be independent from each other. Therefore, the ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:21 sensitivity analysis can be done by accounting for the variations of each parameter individually, as- suming that all other parameters have fixed values. With Qsl/Islbeing the charge consumed/current drawn for sleeping, the sensitivity Sdphcan be written as: S(dph)=Qph dph+Qsl dph=Qph(dmax)Qph(dmin)(dmaxdmin)Isl (dmaxdmin)(22) The a phase phis S(Iph)=Qph Iph=Qph(Imax)Qph(Imin) ImaxImin(23) By assuming that the current Iphand the duration dphof a phase are independent from each other, one can further simplify: S(Iph)=dph, S(dph)=IphIsl (24) For the duration of the post-processing phase dpost, which is the parameter that was subjected to the strongest variations in our measurements, the change in the charge-consumption of a connection interval is (using S(dpost)=IpostIsl8.0 mA changeQtotal Qtotalis16 %. This means, due to variations in the post-processing phase, the energy consumption of a whole connection event might vary by 16 %. The relative change in the energy consumption of a connection interval caused by variations in the transmission current Itxis (using S(Itx)=dtx\u00b7Nseq=350\u00b5s, andItxroughly correspond to the differences between the minimum and maximum values given in Appendix A. 6.2 Using the Model Along with this paper, an implementation of our proposed energy model has been made available [13]. It is written as a C-library that provides easy-to-use functions for estimating the energy consumption of a BLE device and comes with a complete documentation in the Doxygen format. It has a small resource demand and does not rely on any external code besides from standard libraries. Therefore, it can easily be ported to embedded platforms. The usage of the library is intuitive and illustrated with many examples. For example, to calculate the charge-consumption for a connection interval of Tc=100 ms , 5 pairs of packets per connection event with 10bytes received and 20bytes sent per packet and with 3 dBm of transmission power, the following example can be used. double charge = ble_e_model_c_getChargeConnectionIntervalSamePayload(0,0.1,5,10,20,3); 6.3 Design Guidelines In this section, we present possible uses of our model, leading to guidelines on optimizing the parameter values towards low power consumption. 6.3.1 Advertising/Scanning. Figure 9 shows the expected charges consumed by the advertiser and the scanner for different scan windows ds. It reveals multiple interesting results. First, there are some beneficial values of Ta,0, for which the latency becomes lower than for neighboring values with higher energy consumption. In other words, by choosing values of Ta,0that lie within local minima, both the latency and the duty-cycle can be minimized. Another interesting outcome is that for small values of Ta,0, the energy consumption is less sensitive on dsthan for higher values. From these results, we propose the following choices to energy-optimize neighbor discovery procedures: (1)For devices with short expected idle-scanning durations (i.e., both devices begin the advertis- ing/scanning procedure at approximately the same point in time), we suggest using continuous scanning for achieving the lowest possible discovery latency while still maintaining energy effi- ciency. If executed continuously, the energy consumption for the scanner will be maximal whereas the advertiser can chose arbitrarily large intervals. Therefore, this mode is also beneficial when the ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.1:22 Philipp H. Kindt et al. Fig. 9. Expected advertising/scanning charge for Ts=3.12 s,da=446\u00b5s,dch=150\u00b5s,=93.12\u00b5s, =0.9999. The charge consumed by each scan event has been assumed to be irx ,S\u00b7ds. scanner has a significantly higher energy budget than the advertiser (e.g., because it is connected to the grid). (2)For devices that usually spend the vast majority of their time in idle-scanning or idle- advertising, a reasonable trade-off between latency and energy-consumption needs to be achieved. Unlike in the scenario above, where the energy spent for discovery is large against the one for idle-scanning/advertising, here, the energy for idle-scanning/advertising needs to be optimized. We suggest first choosing Tsanddssuch that the desired energy-consumption of the scanner is met. Next, all values of Ta,0should be computed using our model, and one which lies close to a local latency minimum and close to the desired energy-consumption of the advertiser needs to be chosen. Third, for further optimizing the discovery procedure, these steps can be repeated for different values of Tsanddsthat lead to the same energy-consumption. Fig. 10. Current consumption for different payload throughputs (goodputs) using different payload sizes per event for a slave. The protocol overhead is 17 bytes per packet. Payloads that exceed the maximum capacity per packet are distributed into multiple packets. 6.3.2 Connected mode. In the connected mode, a parametrization needs to be chosen that optimizes the energy consumption for given constraints on the minimum throughput and maximum latency. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:23 Fig. 11. Energy considerations when increasing or decreasing the connection interval for a slave. The horizontal lines depict the update costs. The bold diagonal line depicts the difference in the consumed charge. Fig. 12. Current consumption of a master for different connection intervals and tx-power levels for 8 packets per event with 20 bytes of payload + 17 bytes overhead in each packet. The line for the slave shows the current consumption of the slave to receive these packets and to respond with an empty packet. Figure 10 shows the mean current of a BLE device with different amounts of payload bytes per connection event. Every packet contains 17 bytes of protocol overhead and a maximum of 20 bytes of payload. If there are more than 20 bytes of payload in an event, two or more (pairs of) packets can be transmitted within one event. Given a fixed amount of payload (and hence packets) per event, different throughputs of the payload (goodputs) can be achieved by modifying the connection interval. The dotted, diagonal lines depict different levels of energy-efficiency per byte. As can be seen, different numbers of payload per event are associated with different efficiencies =bytes chare. A parametrization drawing a higher current consumption can have a better efficiency per byte of payload than others drawing a lower current. For example, the point with the smallest current and smallest goodput at the lower left of the figure has a far lower efficiency than achieving the same goodput with 16 bytes per event. Another fact that can be observed is that for any of the curves with a fixed payload per event, the increase of the goodput leads to a rise of the efficiency but at the same time to an increased current consumption. To achive a high efficiency for a given goodput, our suggestions are as follows. (1)Add as much payload in a packet as possible [ 29]. In an ATT_HANDLE_NOTIFY-event, which is typically used for transmitting payload via the attribute protocol of BLE, the protocol overhead is 17 bytes, whereas the maximum payload per event is 20 bytes. Not utilizing the whole 20 bytes of payload leads to a larger overhead per byte of payload. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.1:24 Philipp H. Kindt et al. (2)Maximize the number of (filled) packets per event, [ 29] while increasing the connection interval to the maximum value that still meets the required throughput- and latency constraints. The efficiency per byte is important in scenarios in which a certain, large amount of payload needs to be transmitted in a burst. Below, we consider a scenario in which the required data rate varies over time, e.g., for a sensor that opportunistically transmits changes in the sensed data. (3) When idle, the connection interval Tcshould be as large as possible to avoid empty polling packets. Figure 12 shows the power consumption for transmitting eight 20-byte-payload-packets per event for different values of Tc. Clearly, the energy consumption is highly sensitive on Tc. (4)In some cases, it is beneficial to update the connection interval. Due to the necessary idle- listening in the course of the resynchronization procedure described in Section 4.2.3, such updates involve a significant energy overhead, especially for the slave. Updates should only be performed if the expected savings are higher than the update overheads. The two dotted lines in Figure 11 depict the charges consumed over time by a slave for receiving 20 bytes per connection interval from the master, with Tc=0.0075 s andTc=4.0 s. The bold line in this figure represents the difference in the charge consumption between the two connection intervals and is therefore equal to the savings per time if one would change Tcfrom 7.5 ms to4.0 s. The horizontal lines depict the cost in terms of charge for updating Tc=7.5 ms toTc=4.0 sand vice versa. As described in Section 4.2.3, the master might chose different values for dtwanddtwo, which lead to different energy consumptions. Therefore, both the charge for updating Tcin the best- and worst-case are depicted. For example, in the worst-case, an update from Tc=7.5 ms to4.0 swould pay of after 23 connection intervals. (5)If the variations in the required throughput cannot be predicted with sufficient accuracies, the slave latency feature of BLE should be used instead of an update of Tc. In general, there is a trade-off: Updating Tcyields higher savings than skipping events using slave latency (since also the master can save energy), but using slave latency comes with no additional overhead. In contrast, updating Tcis energy-expensive. (6)Figure 12 reveals that energy can be saved if the tx-power-level is adjusted to a value that is sufficient to transmit the data across the distance between sender and receiver without any losses. 7 CONCLUDING REMARKS In this paper, a comprehensive energy model of the BLE protocol was presented. The model parameter values for BLE112-devices were given. Modeled results have been compared to measured ones for the connected mode and for the neighbor discovery procedure. In a test-scenario, an error of the predicted current of no more than 3.4 %was measured for the connected mode. The proposed model can be used for battery lifetime calculations, for predictions on worst case peak currents and for deriving power management strategies. With the results presented, power-management- algorithms for updating the connection parameters adaptively to the current situation can be developed. Further research on an error estimation for the parameters andof Algorithm 1 seems to be desirable for reducing the runtime of the algorithm. An open research topic is the reception probability in continuous broadcasting scenarios, where data is exchanged using advertising/scanning without ever establishing a connection. REFERENCES [1]I. Agadakos, J. and G. Portokalidis. 2017. Techu: Open and Privacy-Preserving Crowdsourced GPS for the Masses. In International Conference on Mobile Systems, Applications, and Services (MobiSys) . [2]D. Auguste. 2015. Model for Predicting Bluetooth Low Energy Micro-Location Beacon Coin Cell Battery Lifetime . Master's thesis. Regis University, Dayton Memorial Library. [3] Bluegiga. 2011. BLE112 Data Sheet. (2011). Version 1.21. [4]K. Cho, G. Park, W. Cho, J. Seo, and K. Han. 2016. Performance analysis of device discovery of Bluetooth Low Energy (BLE) networks. Computer Communications 81 (2016), 72 - 85. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:25 [5]K. Cho, W. Park, M. Hong, G. Park, W. Cho, J. Seo, and K. Han. 2015. Analysis of Latency Performance of Bluetooth Low Energy (BLE) Networks. Sensors 15, 1 (2015), 59-78. [6]A. Del Campo, L. Cintioni, S. Spinsante, and E. Gambi. 2017. Analysis and Tools for Improved Management of Connectionless and Connection-Oriented BLE Devices Coexistence. Sensors 17, 4 (2017), 792. [7]M.C. Ekstrom, M. Bergblomma, M. Linden, M. Bjorkman, and M. Ekstrom. 2012. A Bluetooth Radio Energy Consumption Model for Low-Duty-Cycle Applications. IEEE Transactions on Instrumentation and Measurement (TIM) 61, 3 (2012), 609-617. [8]C. Gomez, I. Demirkol, and J. Paradells. 2011. Modeling the Maximum Throughput of Bluetooth Low Energy in an Error-Prone Link. IEEE Communications Letters 15, 11 (2011), 1187-1189. [9]C. Gomez, J. Oller, and J. Paradells. 2012. Overview and Evaluation of Bluetooth Low Energy: An Emerging Low-Power Wireless Technology. Sensors 12, 9 (2012), 11734-11753. [10] W. S. Jeon, M. H. Dwijaksara, and D. G. Jeong. 2017. Performance Analysis of Neighbor Discovery Process in Bluetooth Low-Energy Networks. IEEE Transactions on Vehicular Technology 66, 2 (2017), 1865-1871. [11] S. Kamath and J. Lindh. 2012. Application Note AN092: Measuring Bluetooth Low Energy Power Consumption. P.H. discovery latency in BLE-like protocols. IEEE Transactions on Mobile Computing (TMC) 17, 3 (2018), 617-631. [13] P. Kindt, D. Yunge, R. Diemer, and S. 2014. C-implementation of the BLE energy model. http://www.rcs. ei.tum.de/en/research/wireless-sensor-networks/bleemod. (2014). [14] P. Kindt, D. Yunge, M. S. Chakraborty. 2015. Adaptive Online Power-Management for Bluetooth Low Energy. InIEEE Conference D. Yunge, Diemer R., Chakraborty. 2014. Precise Energy Modeling for the Bluetooth Low Energy Protocol. CoRR abs/1403.2919 (2014). [16] A. Liendo, D. Morche, R. Guizzetti, and F. Rousseau. 2018. BLE Parameter Optimization for IoT Applications. In IEEE International Conference on Communications (ICC) . Kansas City, MO, United States. [17] A. Liendo, D. Morche, R. Guizzetti, and F. Rousseau. 2018. Efficient Bluetooth Low Energy Operation for Low Duty Cycle Applications. In IEEE International Conference on Communications (ICC) . [18] J. Liu and C. Chen. 2012. Energy Analysis of Neighbor Discovery in Bluetooth Low Energy Networks . Technical Report. URL: research.nokia.com/files/public/TR-EnergyAnalysis-BLE.pdf. [19] J. Liu, C. Chen, and Y. Ma. 2012. Modeling and performance analysis of device discovery in Bluetooth Low Energy networks. In 2012 IEEE Global Communications Conference (GLOBECOM) . [20] J. Liu, C. Chen, and Y. Ma. 2012. Modeling Neighbor Discovery in Bluetooth Low Energy Networks. IEEE Communica- tions Letters 16, 9 1439-1441. M. Lai, and T.M. Wendt. 2012. Bluetooth Low Energy (BLE) based wireless sensors. In IEEE Sensors . 1-4. [22] E. Mackensen, M. Lai, and T.M. Wendt. 2012. Performance analysis of an Bluetooth Low Energy sensor system. In IEEE International Symposium on Wireless Systems (IDAACS-SWS) . [23] Bluetooth SIG. 2010. Specification of the Bluetooth 4.0. (June 2010). Volume 0, available via bluetooth.org. [24] Texas Instruments . 2010. SmartRF Packet Revision june 2013, URL: http://www.ti.com/lit/gpn/cc2540. [26] F. Samie, S. Paul, L. Bauer, and J. Henkel. 2018. Highly efficient and accurate seizure prediction on constrained IoT devices. In Design, Automation Test in Europe Conference Exhibition (DATE) . [27] R. Schrader, T. Ax, C. R\u00f6hrig, and C. F\u00fchner. 2016. Advertising power consumption of Bluetooth Low Energy systems. InInternational Symposium on Wireless Systems within the Conferences on Intelligent Data Acquisition and Advanced Computing Systems (IDAACS-SWS) . [28] C. Schurgers, V. Tsiatsis, S. Ganeriwal, and M. Srivastava. 2002. Optimizing sensor networks in the energy-latency- density design space. IEEE Transactions on Mobile Computing (TMC) 1, 1 (2002), 70-80. M. Siekkinen, M. Hiienkari, J.K. Nurminen, and 2012. How low energy is Bluetooth Low Energy? Comparative measurements with ZigBee/802.15.4. In IEEE Wireless Communications and Networking Conference Workshops (WCNCW) . [30] R. Yates and D. J. Goodman. 2005. Probability and Stochastic Processes . John Wiley & Sons, Inc. Second Edition. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.1:26 Philipp H. Kindt et al. A PARAMETER VALUES FOR BLE112 IN CONNECTED MODE In the two tables of this section, we present values for all model parameters of the connected mode for a BLE112-device. The slave clock latency is given by a certain factor, using which a certain amount of wall clock time needs to be multiplied by. For the BLE112-device, it is reported to lie between 31\u00b7106and50\u00b7106during the handshaking for the connection establishment process. In this paper, we therefore assume a sleep clock accuracy of 50\u00b7106. The duration dprerx is longer than its table value for the first rx-phase within a connection event of a slave. For the latter case, dprerx is388\u00b5s. The values presented have been measured by analyzing about 4000 connection events of a BLE-attribute write procedure without confirmation of the remote node for different payload lengths and different numbers of events per packet. The connection interval Tcwas100 ms , thetx-power was 3 dBm . We also performed the measurement for different tx-power levels. These tx-power levels mainly result in different currents for the tx-section. Other parameters such as Qcsoanddtraare influenced too, but the impact on their values and hence on the event energy consumption is much lower than the impact of the tx-current. For a good approximation, we assume all parameters except the tx-current to be constant for different tx-power levels. Further, we assume a sleep current Islof0.9\u00b5A, as -1.2 -1.8 -0.8 0.2 - - - - Table 3. Model parameters for the connected mode with a tx-power of 3 dBm for a Xmin) and maximal ( Xmax) are given standard deviation Xstd. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low 15 dBm 27.7 17 dBm 27.6 19 dBm 27.5 21 dBm 27.5 23 dBm 26.3 Table 4. Current consumption in the transmission-phase for all supported tx-power-levels of a BLE112- transceiverver. B PARAMETER VALUES FOR BLE112 IN SCANNING MODE The table below presents values for all model parameters for the scanning mode. They were obtained by analyzing 1257 scan events for a tx-power 0.0123 - - - - Table 5. Model parameter values for scan events. Average ( Xav), minimal( Xmin) and maximal ( Xmax) values are standard deviation Xstd. ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1. Publication date: January 2020.1:28 Philipp H. Kindt et al. C TABLE OF SYMBOLS The symbol Xstands either for the charge Q, the current Ior the duration dof a phase of a connection event. BLE Protocol Symbol Unit Description Ta [s] Advertising interval Ts [s] Scan interval ds [s] Scan window dI F S [s] Interframe-space (t) [s] Random advertising delay dtw [s] Transmit window offset tanchor Anchor point: Reference for connection interval Tc [s] Connection interval Tc,o [s] Connection interval before a connection parameter up- date Tc,n [s] Connection interval after a connection parameter update dc [s] Duration of a connection event Nsl - Slave latency dadv [s] Expected discovery latency in the advertising/scanning mode Event Model for the Connected Mode Symbol Unit Description Xhead [C/A/s] Device wakeup phase Window widening phase Xprerx [C/A/s] Constant part of the reception phase Xrx [C/A/s] Reception phase Nrx - Number of Constant part of transmission phase Xtx [C/A/s] Transmission phase Ntx - Number of bytes Transient phase Xpost [C/A/s] Postprocessing phase Xtail [C/A/s] Tail (i.e., phase that initiates the sleep mode) dseq [s] Duration of a communications sequence (i.e., exchange of one pair of packets) devent [s] Duration of a whole connection event (from head to tail) Xt [C/A/s] Communication sequence (reception, transmission, interframe-spaces and capaci- tances/resistances) ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:29 Qto [C] Correction term for capacitances/resistances in power supply line SCA Ma/Sl [ppm] Sleep clock accuracy of master/slave Isl [A] Sleep current of the BLE device Event Model for Scan Events Symbol Unit Description Xpre [C/A/s] Wakeup and preprocessing phase XS,1 [C/A/s] Phase of scanning until the first reception takes place Xrx ,s [C/A/s] Reception phase (advertising packet is received) Xrxtx ,s [C/A/s] Reception-to-transmission transition phase Xtx,s [C/A/s] Transmission (or phase Xtxrx ,s [C/A/s] Transmission-to-reception transition phase Xrxs [C/A/s] Phase of the reception of a scan response Xrxrx ,s [C/A/s] Reception-to-scanning transition phase XS,2 [C/A/s] Phase of scanning until the end of the scan event Xpost ,s [C/A/s] Postprocessing phase Iscan [A] Current consumption of the device while scanning QsEv [C] Charge consumed by a scan event (general case) QsEv,Idle [C] Charge consumed by a scan event (idle scanning) Qcrx ,s [C] Correction term for non-rectangular shapes of the reception-phase(s) Qctx ,s [C] Correction term for non-rectangular shapes of the transmission-phase(s) Connection Procedure Model Symbol Unit Description Qev,cR ,Ma/Sl [C] Charge consumed by the master/slave for an event a connection request event is sent within Qev,cU ,Ma/Sl [C] Charge consumed by the master/slave for an event a connection update packet is sent within dsl,cR/cU [s] Sleep duration after a connection request/update event QcE ,Ma/Sl [C] Charge consumed for a connection establishment by the master/slave QcU ,Ma/Sl [C] Charge consumed for a connection parameter update by master/slave dp [s] Time from the beginning of the transmit window until the master sends the first packet using the new Tc dww ,cE/cU [s] Window widening for connection establish- Discovery Latency Model Symbol Unit Description dadvPk [s] Duration of an advertising packet [s] Offset between the beginning of the first scan event and the first advertising event Ta,0 [s] Constant part of the advertising interval ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.1:30 Philipp H. Kindt et al. [s] Random delay for advertising events ti,suc [s] Set of points in time an advertising packet which is sent within is received successfully dearly [s] Time an advertising event can be sent before the begin- ning of the corresponding scan event to be received suc- cessfully dlate [s] Time an advertising event must be sent before the end of the corresponding scan event to be received successfully d s [s] Effective scan window ( d s=dsda) da [s] Duration of an advertising packet dch [s] Time the advertiser needs for changing the channel it sends its packets on tsE [s] Time a scan event starts at tadvEvt [s] Time an advertising event is sent at phit(n) - Probability of an advertising event nfor hitting a scan event f() - Probability density function for the random advertising delay \u00b5 - Expected value - Standard deviation f(tadvEvt) - Probability density function for the beginning of an ad- vertising event pk - Probability for an advertising event being received in the scan event k (t) - Standard normal cumulative distribution tai [s] Point in time an advertising event would take place with- out taking the random delay into account kmin(n), kmax(n)- Lowest and highest index of a scan event the advertising event ncould overlap with pcM(n) - Cumulative miss probability (probability that n advertis- ing events in a row miss the scan event) dexp [s] Expected discovery latency for a given pair of values andk - Parameter of Algorithm 1 that determines the accuracy and computational complexity ch - Channel number (37/38/39) dexp ,max [s] Maximum expected discovery latency for a given pair of valuesandkbefore the calculation is aborted [s] Interval between two offsets that are examined dadv [s] Expected discovery latency Estimating the Number of Events Symbol Unit Description Nc,ma/sl - Number of connection events of the master/slave within a given amount of time ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020.Energy Modeling for the Bluetooth Low Energy Protocol 1:31 Qcon [C] Overall charge consumed by the master/slave in the con- nected mode T [s] Amount of time under consideration Nsl - Average slave latency Xevent [C/A/s] Charge/current/duration of an arbitrary event Xf ull advertising event Xlast [C/A/s] Last advertising event Qadv [C] Expected charge consumed by an advertiser (whole dis- covery process) QadvEvent [C] Charge consumed by an advertising event X37(38/39) [C/A/s] Advertising event on channel 37/38/39 Na - Expected number of advertising events Qs [C] Expected energy of scanner (whole discovery process) Qactive [C] Expected charge of scanner for all times it is not sleeping Qsleep [C] Expected charge of scanner for all times it is sleeping QsEv,idle [C] Charge consumed by an idle scan event (i.e., a scan event without reception) Na,Ns [C] Expected number of advertising/scan events during neighbor discovery Model Validation and Sensitivity Analysis Symbol Unit Description m - Relative error between measured and modeled values S var. Sensitivity Qph [C] Charge consumed by a phase/state the device is in (e.g., preprocessing, reception,..) dmin/dmax [s] Minimum/maximum phase of a phase Qtotal [C] Variation of the total charge consumed in a given phase [Bytes/C] Efficiency ACM Trans. Embedd. Comput. Syst., Vol. 1, No. 1, Article 1. Publication date: January 2020. "}