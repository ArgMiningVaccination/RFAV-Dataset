{"title": "JSON-RPC API | ethereum.org", "author": null, "url": "https://ethereum.org", "hostname": "ethereum.org", "description": "A stateless, light-weight remote procedure call (RPC) protocol for Ethereum clients.", "sitename": "ethereum.org", "date": "2000-01-01", "cleaned_text": "DateTime In order for a software application to interact with the Ethereum blockchain - either by reading blockchain data or sending transactions to the network - it must connect to an Ethereum node. For this purpose, every [Ethereum client](/en/developers/docs/nodes-and-clients/#execution-clients) implements a [JSON-RPC specification(opens in a new tab)](https://github.com/ethereum/execution-apis), so there is a uniform set of methods that applications can rely on regardless of the specific node or client implementation. [JSON-RPC(opens in a new tab)](https://www.jsonrpc.org/specification) is a stateless, light-weight remote procedure call (RPC) protocol. It defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over HTTP, or in many various message passing environments. It uses JSON (RFC 4627) as data format. Client implementations Ethereum clients each may utilize different programming languages when implementing the JSON-RPC specification. See individual [client documentation](/en/developers/docs/nodes-and-clients/#execution-clients) for further details related to specific programming languages. We recommend checking the documentation of each client for the latest API support information. Convenience Libraries While you may choose to interact directly with Ethereum clients via the JSON-RPC API, there are often easier options for dapp developers. Many [JavaScript](/en/developers/docs/apis/javascript/#available-libraries) and [backend API](/en/developers/docs/apis/backend/#available-libraries) libraries exist to provide wrappers on top of the JSON-RPC API. With these libraries, developers can write intuitive, one-line methods in the programming language of their choice to initialize JSON-RPC requests (under the hood) that interact with Ethereum. Consensus client APIs This page deals mainly with the JSON-RPC API used by Ethereum execution clients. However, consensus clients also have an RPC API that allows users to query information about the node, request Beacon blocks, Beacon state, and other consensus-related information directly from a node. This API is documented on the [Beacon API webpage(opens in a new tab)](https://ethereum.github.io/beacon-APIs/#/). An internal API is also used for inter-client communication within a node - that is, it enables the consensus client and execution client to swap data. This is called the 'Engine API' and the specs are available on [GitHub(opens in a new tab)](https://github.com/ethereum/execution-apis/blob/main/src/engine/common.md). Execution client spec [Read the full JSON-RPC API spec on GitHub(opens in a new tab)](https://github.com/ethereum/execution-apis). Conventions Hex value encoding Two key data types get passed over JSON: unformatted byte arrays and quantities. Both are passed with a hex encoding but with different requirements for formatting. Quantities When encoding quantities (integers, numbers): encode as hex, prefix with \"0x\", the most compact representation (slight exception: zero should be represented as \"0x0\"). Here are some examples: - 0x41 (65 in decimal) - 0x400 (1024 in decimal) - WRONG: 0x (should always have at least one digit - zero is \"0x0\") - WRONG: 0x0400 (no leading bytecode arrays): encode hex, prefix with \"0x\", two hex digits per byte. Here are some examples: - 0x41 (size 1, \"A\") - 0x004200 (size 3, \"\\0B\\0\") - 0x (size 0, \"\") - WRONG: 0xf0f0f (must be even number of digits) - WRONG: 004200 (must be prefixed 0x) The default block parameter The following methods have an extra default block parameter: When requests are made that act on the state of Ethereum, the last default block parameter determines the height of the block. The following options are possible for the defaultBlock parameter: HEX String- an integer block number String \"earliest\"for the earliest/genesis block String \"latest\"- for the latest mined block String \"safe\"- for the latest safe head block String \"finalized\"- for the latest finalized block String \"pending\"- for the pending state/transactions Examples On this page we provide examples of how to use individual JSON_RPC API endpoints using the command line tool, [curl(opens in a new tab)](https://curl.se). These individual endpoint examples are found below in the [Curl examples](#curl-examples) section. Further down the page, we also provide an [end-to-end example](#usage-example) for compiling and deploying a smart contract using a Geth node, the JSON_RPC API and curl. Curl examples Examples of using the JSON_RPC API by making [curl(opens in a new tab)](https://curl.se) requests to an Ethereum node are provided below. Each example includes a description of the specific endpoint, its parameters, return type, and a worked example of how it should be used. The curl requests might return an error message relating to the content type. This is because the --data option sets the content type to application/x-www-form-urlencoded. If your node does complain about this, manually set the header by placing -H \"Content-Type: application/json\" at the start of the call. The examples also do not include the URL/IP & port combination which must be the last argument given to curl (e.g. 127.0.0.1:8545). A complete curl request including these additional data takes the following form: 1curl -H \"Content-Type: application/json\" -X POST --data State, History A handful of core JSON-RPC methods require data from the Ethereum network, and fall neatly into three main categories: Gossip, State, and History. Use the links in these sections to jump to each method, or use the table of contents to explore the whole list of methods. Gossip Methods These methods track the head of the chain. This is how transactions make their way around the network, find their way into blocks, and how clients find out about new blocks. State Methods Methods that report the current state of all the data stored. The \"state\" is like one big shared piece of RAM, and includes account balances, contract data, and gas estimations. History Methods Fetches historical records of every block back to genesis. This is like one large append-only file, and includes all block headers, block bodies, uncle blocks, and transaction Returns the current client version. Parameters None Returns String - The current client version Example 1// SHA3-256) of the given data. Parameters DATA- the data to convert into a SHA3 hash 1params: [\"0x68656c6c6f20776f726c64\"]2Copy Returns DATA - The SHA3 result of the given string. Example current network id. Parameters None Returns String - The current network id. The full list of current network IDs is available at [chainlist.org(opens in a new tab)](https://chainlist.org). Some common if client is actively listening for network connections. Parameters None Returns Boolean - true when listening, otherwise false. Example 1// number of peers currently connected to the client. Parameters None Returns QUANTITY - integer of the number of connected peers. Example Ethereum protocol version. Note that this method is [not available in Geth(opens in a new tab)](https://github.com/ethereum/go-ethereum/pull/22064#issuecomment-788682924). Parameters None Returns String - The current Ethereum protocol version Example object with data about the sync status or false. Parameters None Returns The precise return data varies between client implementations. All clients return False when the node is not syncing, and all clients return the following fields. Object|Boolean, An object with sync status data or FALSE, when not syncing: startingBlock: QUANTITY- The block at which the import started (will only be reset, after the sync reached his head) currentBlock: QUANTITY- The current block, same as eth_blockNumber highestBlock: QUANTITY- The estimated highest block However, the individual clients may also provide additional data. For example Geth the documentation for your specific client for more details. Example 1// coinbase address. Parameters None Returns DATA, 20 bytes - the current coinbase address. Example for signing replay-protected transactions. Parameters None Returns chainId, hexadecimal value as a string representing the integer of the current chain id. Example 1// if client is actively mining new blocks. This can only return true for proof-of-work networks and may not be available in some clients since [The Merge](/en/roadmap/merge/). Parameters None Returns Boolean - returns true of the client is mining, otherwise false. Example 1// hashes per second that the node is mining with. This can only return true for proof-of-work networks and may not be available in some clients since [The Merge](/en/roadmap/merge/). Parameters None Returns QUANTITY - number of hashes estimate of the current price per gas in wei. For example, the Besu client examines the last 100 blocks and returns the median gas unit price by default. Parameters None Returns QUANTITY - integer of the current gas price in wei. Example 1// a list of addresses owned by client. Parameters None Returns Array of DATA, 20 Bytes - addresses owned by the client. Example 1// of most recent block. Parameters None Returns QUANTITY - integer of the current block number the client is on. Example the balance of the account of given address. Parameters DATA, 20 Bytes - address to check for balance. QUANTITY|TAG- integer block number, or the string parameter](/en/developers/docs/apis/json-rpc/#default-block) 1params: [\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\", \"latest\"]2Copy Returns QUANTITY - integer of the current balance in wei. Example 1// the value from a storage position at a given address. Parameters DATA, 20 Bytes - address of the storage. QUANTITY- integer of the position in the storage. QUANTITY|TAG- integer block number, or the string \"latest\", \"earliest\"or \"pending\", see the [default block parameter](/en/developers/docs/apis/json-rpc/#default-block) Returns DATA - the value at this storage position. Example Calculating the correct position depends on the storage to retrieve. Consider the following contract deployed at 0x295a70b2de5e3953354a6a8344e616ed314d7251 by element of the map is harder. The position of an element in the map is calculated with: 1keccack(LeftPad32(key, 0), LeftPad32(map position, 0))2Copy This means to retrieve the storage on pos1[\"0x391694e7e0b0cce554cb130d723a9d27458f9298\"] we need to calculate the +4 comes with the web3 library can be used to make the calculation: 1> var key = \"000000000000000000000000391694e7e0b0cce554cb130d723a9d27458f9298\" + of transactions sent from an address. Parameters DATA, 20 Bytes - address. QUANTITY|TAG- integer block number, or the string // state at the latest block4]5Copy Returns QUANTITY - integer of the number of transactions send from this address. Example number of transactions in a block from a block matching the given block hash. Parameters DATA, 32 Bytes - hash of a block 1params: [\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"]2Copy Returns QUANTITY - integer of the number of transactions in this block. Example number of transactions in a block matching the given block number. Parameters QUANTITY|TAG- integer of a block number, or the string \"earliest\", // 2323]4Copy Returns QUANTITY - integer of the number of transactions in this block. Example number of uncles in a block from a block matching the given block hash. Parameters DATA, 32 Bytes - hash of a block 1params: [\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"]2Copy Returns QUANTITY - integer of the number of uncles in this block. Example number of uncles in a block from a block matching the given block number. Parameters QUANTITY|TAG- integer of a block number, or the string \"latest\", // 2323]4Copy Returns QUANTITY - integer of the number of uncles in this block. Example code at a given address. Parameters DATA, 20 Bytes - address QUANTITY|TAG- integer block number, or the string // 24]5Copy Returns DATA - the code from the given address. Example 1// signature with: sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))). By adding a prefix to the message makes the calculated signature recognizable as an Ethereum specific signature. This prevents misuse where a malicious dapp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim. Note: the address to sign with must be unlocked. Parameters DATA, 20 Bytes - address DATA, N Bytes - message to sign Returns DATA: Signature Example transaction that can be submitted to the network at a later time using with [eth_sendRawTransaction](#eth_sendrawtransaction). Parameters Object- The transaction object type: from: DATA, 20 Bytes - The address the transaction is sent from. to: DATA, 20 Bytes - (optional when creating new contract) The address the transaction is directed to. gas: QUANTITY- (optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas. gasPrice: QUANTITY- (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas, in Wei. value: QUANTITY- (optional) Integer of the value sent with this transaction, in Wei. data: DATA- The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. nonce: QUANTITY- (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. Returns DATA, The RLP-encoded transaction object signed by the specified account. Example message call transaction or a contract creation, if the data field contains code, and signs it using the account specified in from. Parameters Object- The transaction object from: DATA, 20 Bytes - The address the transaction is sent from. to: DATA, 20 Bytes - (optional when creating new contract) The address the transaction is directed to. gas: QUANTITY- (optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas. gasPrice: QUANTITY- (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas. value: QUANTITY- (optional) Integer of the value sent with this transaction. data: DATA- The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. nonce: QUANTITY- (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the Returns DATA, 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use [eth_getTransactionReceipt](#eth_gettransactionreceipt) to get the contract address, after the transaction was mined, when you created a contract. Example 1// message call transaction or a contract creation for signed transactions. Parameters DATA, The signed transaction data. 1params: [2 \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",3]4Copy Returns DATA, 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use [eth_getTransactionReceipt](#eth_gettransactionreceipt) to get the contract address, after the transaction was mined, when you created a contract. Example 1// new message call immediately without creating a transaction on the block chain. Often used for executing read-only smart contract functions, for example the balanceOf for an ERC-20 contract. Parameters Object- The transaction call object from: DATA, 20 Bytes - (optional) The address the transaction is sent from. to: DATA, 20 Bytes - The address the transaction is directed to. gas: QUANTITY- (optional) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions. gasPrice: QUANTITY- (optional) Integer of the gasPrice used for each paid gas value: QUANTITY- (optional) Integer of the value sent with this transaction data: DATA- (optional) Hash of the method signature and encoded parameters. For details see [Ethereum Contract ABI in the Solidity documentation(opens in a new tab)](https://docs.soliditylang.org/en/latest/abi-spec.html) QUANTITY|TAG- integer block number, or string \"latest\", \"earliest\"or \"pending\", see the [default block parameter](/en/developers/docs/apis/json-rpc/#default-block) Returns DATA - the return value of executed contract. Example 1// returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance. Parameters See [eth_call](#eth_call) parameters, except that all properties are optional. If no gas limit is specified geth uses the block gas limit from the pending block as an upper bound. As a result the returned estimate might not be enough to executed the call/transaction when the amount of gas is higher than the pending block gas limit. Returns QUANTITY - the amount of gas used. Example 1// information about a block by hash. Parameters DATA, 32 Bytes - Hash of a block. Boolean- If trueit returns the full transaction objects, if falseonly the hashes of the transactions. 1params: [2 \"0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae\",3 false,4]5Copy Returns Object - A block object, or null when no block was found: number: QUANTITY- the block number. nullwhen its pending block. hash: DATA, 32 Bytes - hash of the block. nullwhen its pending block. parentHash: DATA, 32 Bytes - hash of the parent block. nonce: DATA, 8 Bytes - hash of the generated proof-of-work. nullwhen its pending block. sha3Uncles: DATA, 32 Bytes - SHA3 of the uncles data in the block. logsBloom: DATA, 256 Bytes - the bloom filter for the logs of the block. nullwhen its pending block. transactionsRoot: DATA, 32 Bytes - the root of the transaction trie of the block. stateRoot: DATA, 32 Bytes - the root of the final state trie of the block. receiptsRoot: DATA, 32 Bytes - the root of the receipts trie of the block. miner: DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given. difficulty: QUANTITY- integer of the difficulty for this block. totalDifficulty: QUANTITY- integer of the total difficulty of the chain until this block. extraData: DATA- the \"extra data\" field of this block. size: QUANTITY- integer the size of this block in bytes. gasLimit: QUANTITY- the maximum gas allowed in this block. gasUsed: QUANTITY- the total used gas by all transactions in this block. timestamp: QUANTITY- the unix timestamp for when the block was collated. transactions: Array- Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. uncles: Array- Array block by block number. Parameters QUANTITY|TAG- integer of a block number, or the string \"earliest\", \"latest\"or \"pending\", as in the [default block parameter](/en/developers/docs/apis/json-rpc/#default-block). Boolean- If trueit returns the full transaction objects, if falseonly the hashes of the transactions. 1params: true],\"id\":1}'3Copy Result see [eth_getBlockByHash](#eth_getblockbyhash) eth_getTransactionByHash Returns the information about a transaction requested by transaction hash. Parameters DATA, 32 Bytes - hash of a transaction 1params: [\"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b\"]2Copy Returns Object - A transaction object, or null when no transaction was found: blockHash: DATA, 32 Bytes - hash of the block where this transaction was in. nullwhen its pending. blockNumber: QUANTITY- block number where this transaction was in. nullwhen its pending. from: DATA, 20 Bytes - address of the sender. gas: QUANTITY- gas provided by the sender. gasPrice: QUANTITY- gas price provided by the sender in Wei. hash: DATA, 32 Bytes - hash of the transaction. input: DATA- the data send along with the transaction. nonce: QUANTITY- the number of transactions made by the sender prior to this one. to: DATA, 20 Bytes - address of the receiver. nullwhen its a contract creation transaction. transactionIndex: QUANTITY- integer of the transactions index position in the block. nullwhen its pending. value: QUANTITY- value transferred Returns information about a transaction by block hash and transaction index position. Parameters DATA, 32 Bytes - hash of a block. QUANTITY- integer of the transaction index position. 1params: [2 // \"0x0\"],\"id\":1}'3Copy Result see [eth_getTransactionByHash](#eth_gettransactionbyhash) eth_getTransactionByBlockNumberAndIndex Returns information about a transaction by block number and transaction index position. Parameters QUANTITY|TAG- a block number, or the string \"earliest\", \"latest\"or \"pending\", as in the \"0x0\"],\"id\":1}'3Copy Result see [eth_getTransactionByHash](#eth_gettransactionbyhash) eth_getTransactionReceipt Returns the receipt of a transaction by transaction hash. Note That the receipt is not available for pending transactions. Parameters DATA, 32 Bytes - hash of a transaction 1params: [\"0x85d995eba9763907fdf35cd2034144dd9d53ce32cbec21349d4b12823c6860c5\"]2Copy Returns Object - A transaction receipt object, or null when no receipt was found: transactionHash: DATA, 32 Bytes - hash of the transaction. transactionIndex: QUANTITY- integer of the transactions index position in the block. blockHash: DATA, 32 Bytes - hash of the block where this transaction was in. blockNumber: QUANTITY- block number where this transaction was in. from: DATA, 20 Bytes - address of the sender. to: DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction. cumulativeGasUsed: QUANTITY- The total amount of gas used when this transaction was executed in the block. effectiveGasPrice: QUANTITY- The sum of the base fee and tip paid per unit of gas. gasUsed: QUANTITY- The amount of gas used by this specific transaction alone. contractAddress: DATA, 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null. logs: Array- Array of log objects, which this transaction generated. logsBloom: DATA, 256 Bytes - Bloom filter for light clients to quickly retrieve related logs. type: QUANTITY- integer of the transaction type, 0x0for legacy transactions, 0x1for access list types, 0x2for dynamic fees. It also returns either : root: about a uncle of a block by hash and uncle index position. Parameters DATA, 32 Bytes - The hash of a block. QUANTITY- The uncle's index position. 1params: An uncle doesn't contain individual transactions. eth_getUncleByBlockNumberAndIndex Returns information about a uncle of a block by number and uncle index position. Parameters QUANTITY|TAG- a block number, or the string \"earliest\", \"latest\"or in uncle Example POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getUncleByBlockNumberAndIndex\",\"params\":[\"0x29c\", \"0x0\"],\"id\":1}'3Copy Result see [eth_getBlockByHash](#eth_getblockbyhash) eth_newFilter Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state has changed, call [eth_getFilterChanges](#eth_getfilterchanges). A note on specifying topic filters: Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters: []\"anything\" [A]\"A in first position (and anything after)\" [null, B]\"anything in first position AND B in second position (and anything after)\" [A, B]\"A in first position AND B in second position (and anything after)\" [[A, B], [A, B]]\"(A OR B) in first position AND (A OR B) in second position (and anything after)\" - Parameters Object- The filter options: \"latest\") Integer the last mined block or \"pending\", \"earliest\"for not yet mined transactions. toBlock: QUANTITY|TAG- (optional, default: \"latest\") Integer block number, or \"latest\"for the last mined block or \"pending\", \"earliest\"for not yet mined transactions. address: DATA|Array, 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate. topics: Array of DATA, - (optional) Array of 32 Bytes DATAtopics. Topics are order-dependent. Each topic can also be an array of DATA a filter in the node, to notify when a new block arrives. To check if the state has changed, call [eth_getFilterChanges](#eth_getfilterchanges). Parameters None Returns QUANTITY - A filter id. Example a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call [eth_getFilterChanges](#eth_getfilterchanges). Parameters None Returns QUANTITY - A filter id. Example filter with given id. Should always be called when watch is no longer needed. Additionally Filters timeout when they aren't requested with [eth_getFilterChanges](#eth_getfilterchanges) for a period of time. Parameters QUANTITY- The filter id. 1params: [2 \"0xb\", // 113]4Copy Returns Boolean - true if the filter was successfully uninstalled, otherwise false. Example for a filter, which returns an array of logs which occurred since last poll. Parameters QUANTITY- the filter "}