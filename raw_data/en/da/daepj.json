{"title": "pickle \u2014 Python object serialization", "author": null, "url": "https://docs.python.org/3/library/pickle.html", "hostname": "python.org", "description": "Source code: Lib/pickle.py The pickle module implements binary protocols for serializing and de-serializing a Python object structure. \"Pickling\" is the process whereby a Python object hierarchy is...", "sitename": "Python documentation", "date": "2023-09-07", "cleaned_text": "\u2014 Python object serialization pickle [\u00b6](#module-pickle) pickle Source code: [Lib/pickle.py](https://github.com/python/cpython/tree/3.11/Lib/pickle.py) The [ module implements binary protocols for serializing and de-serializing a Python object structure. \"Pickling\" is the process whereby a Python object hierarchy is converted into a byte stream, and \"unpickling\" is the inverse operation, whereby a byte stream (from a pickle](#module-pickle) [binary file](../glossary.html#term-binary-file)or [bytes-like object](../glossary.html#term-bytes-like-object)) is converted back into an object hierarchy. Pickling (and unpickling) is alternatively known as \"serialization\", \"marshalling,\" [1](#id7)or \"flattening\"; however, to avoid confusion, the terms used here are \"pickling\" and \"unpickling\". Warning The pickle module is not secure. Only unpickle data you trust. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling. Never unpickle data that could have come from an untrusted source, or that could have been tampered with. Consider signing data with [ if you need to ensure that it has not been tampered with. hmac](hmac.html#module-hmac) Safer serialization formats such as [ may be more appropriate if you are processing untrusted data. See json](json.html#module-json) [Comparison with json](#comparison-with-json). Relationship to other Python modules [\u00b6](#relationship-to-other-python-modules) Comparison with marshal [\u00b6](#comparison-with-marshal) Python has a more primitive serialization module called [, but in general marshal](marshal.html#module-marshal) [should always be the preferred way to serialize Python objects.](#module-pickle) pickle [exists primarily to support Python's](marshal.html#module-marshal) marshal .pycfiles. The [ module differs from pickle](#module-pickle) [in several significant ways:](marshal.html#module-marshal) marshal The [module keeps track of the objects it has already serialized, so that later references to the same object won't be serialized again.](#module-pickle) pickle [doesn't do this.](marshal.html#module-marshal) marshal This has implications both for recursive objects and object sharing. Recursive objects are objects that contain references to themselves. These are not handled by marshal, and in fact, attempting to marshal recursive objects will crash your Python interpreter. Object sharing happens when there are multiple references to the same object in different places in the object hierarchy being serialized. [stores such objects only once, and ensures that all other references point to the master copy. Shared objects remain shared, which can be very important for mutable objects.](#module-pickle) pickle [cannot be used to serialize user-defined classes and their instances.](marshal.html#module-marshal) marshal [can save and restore class instances transparently, however the class definition must be importable and live in the same module as when the object was stored.](#module-pickle) pickle The [serialization format is not guaranteed to be portable across Python versions. Because its primary job in life is to support](marshal.html#module-marshal) marshal .pycfiles, the Python implementers reserve the right to change the serialization format in non-backwards compatible ways should the need arise. The [serialization format is guaranteed to be backwards compatible across Python releases provided a compatible pickle protocol is chosen and pickling and unpickling code deals with Python 2 to Python 3 type differences if your data is crossing that unique breaking change language boundary.](#module-pickle) pickle Comparison with json [\u00b6](#comparison-with-json) There are fundamental differences between the pickle protocols and [JSON (JavaScript Object Notation)](https://json.org): JSON is a text serialization format (it outputs unicode text, although most of the time it is then encoded to utf-8), while pickle is a binary serialization format; JSON is human-readable, while pickle is not; JSON is interoperable and widely used outside of the Python ecosystem, while pickle is Python-specific; JSON, by default, can only represent a subset of the Python built-in types, and no custom classes; pickle can represent an extremely large number of Python types (many of them automatically, by clever usage of Python's introspection facilities; complex cases can be tackled by implementing [specific object APIs](#pickle-inst)); Unlike pickle, deserializing untrusted JSON does not in itself create an arbitrary code execution vulnerability. See also The [ module: a standard library module allowing JSON serialization and deserialization. json](json.html#module-json) Data stream format [\u00b6](#data-stream-format) The data format used by [ is Python-specific. This has the advantage that there are no restrictions imposed by external standards such as JSON or XDR (which can't represent pointer sharing); however it means that non-Python programs may not be able to reconstruct pickled Python objects. pickle](#module-pickle) By default, the [ data format uses a relatively compact binary representation. If you need optimal size characteristics, you can efficiently pickle](#module-pickle) [compress](archiving.html)pickled data. The module [ contains tools for analyzing data streams generated by pickletools](pickletools.html#module-pickletools) [.](#module-pickle) pickle [source code has extensive comments about opcodes used by pickle protocols.](pickletools.html#module-pickletools) pickletools There are currently 6 different protocols which can be used for pickling. The higher the protocol used, the more recent the version of Python needed to read the pickle produced. Protocol version 0 is the original \"human-readable\" protocol and is backwards compatible with earlier versions of Python. Protocol version 1 is an old binary format which is also compatible with earlier versions of Python. Protocol version 2 was introduced in Python 2.3. It provides much more efficient pickling of [new-style classes](../glossary.html#term-new-style-class). Refer to [PEP 307](https://peps.python.org/pep-0307/)for information about improvements brought by protocol 2. Protocol version 3 was added in Python 3.0. It has explicit support for [objects and cannot be unpickled by Python 2.x. This was the default protocol in Python 3.0-3.7.](stdtypes.html#bytes) bytes Protocol version 4 was added in Python 3.4. It adds support for very large objects, pickling more kinds of objects, and some data format optimizations. It is the default protocol starting with Python 3.8. Refer to [PEP 3154](https://peps.python.org/pep-3154/)for information about improvements brought by protocol 4. Protocol version 5 was added in Python 3.8. It adds support for out-of-band data and speedup for in-band data. Refer to [PEP 574](https://peps.python.org/pep-0574/)for information about improvements brought by protocol 5. Note Serialization is a more primitive notion than persistence; although [ reads and writes file objects, it does not handle the issue of naming persistent objects, nor the (even more complicated) issue of concurrent access to persistent objects. The pickle](#module-pickle) [module can transform a complex object into a byte stream and it can transform the byte stream into an object with the same internal structure. Perhaps the most obvious thing to do with these byte streams is to write them onto a file, but it is also conceivable to send them across a network or store them in a database. The](#module-pickle) pickle [module provides a simple interface to pickle and unpickle objects on DBM-style database files.](shelve.html#module-shelve) shelve Module Interface [\u00b6](#module-interface) To serialize an object hierarchy, you simply call the [ function. Similarly, to de-serialize a data stream, you call the dumps()](#pickle.dumps) [function. However, if you want more control over serialization and de-serialization, you - pickle.HIGHEST_PROTOCOL [\u00b6](#pickle.HIGHEST_PROTOCOL) An integer, the highest [protocol version](#pickle-protocols)available. This value can be passed as a protocol value to functions [and](#pickle.dump) dump() [as well as the](#pickle.dumps) dumps() [constructor.](#pickle.Pickler) integer, the default [protocol version](#pickle-protocols)used for pickling. May be less than [. Currently the default protocol is 4, first introduced in Python 3.4 and incompatible with previous versions.](#pickle.HIGHEST_PROTOCOL) HIGHEST_PROTOCOL Changed in version 3.0: The default protocol is 3. Changed in version 3.8: The default protocol is 4. The [ module provides the following functions to make the pickling process more convenient: pickle](#module-pickle) - pickle.dump(obj, file, protocol=None, *, fix_imports=True, buffer_callback=None) [\u00b6](#pickle.dump) Write the pickled representation of the object obj to the open [file object](../glossary.html#term-file-object)file. This is equivalent to Pickler(file, protocol).dump(obj). Arguments file, protocol, fix_imports and buffer_callback have the same meaning as in the [constructor.](#pickle.Pickler) Pickler Changed in version 3.8: The buffer_callback - pickle.dumps(obj, protocol=None, *, fix_imports=True, buffer_callback=None) [\u00b6](#pickle.dumps) Return the pickled representation of the object obj as a [object, instead of writing it to a file.](stdtypes.html#bytes) bytes Arguments protocol, fix_imports and buffer_callback have the same meaning as in the [constructor.](#pickle.Pickler) Pickler Changed in version 3.8: The buffer_callback pickle.load(file, *, fix_imports=True, encoding='ASCII', errors='strict', buffers=None) [\u00b6](#pickle.load) Read the pickled representation of an object from the open [file object](../glossary.html#term-file-object)file and return the reconstituted object hierarchy specified therein. This is equivalent to Unpickler(file).load(). The protocol version of the pickle is detected automatically, so no protocol argument is needed. Bytes past the pickled representation of the object are ignored. Arguments file, fix_imports, encoding, errors, strict and buffers have the same meaning as in the [constructor.](#pickle.Unpickler) Unpickler Changed in version 3.8: The buffers argument pickle.loads(data, encoding='ASCII', errors='strict', buffers=None) [\u00b6](#pickle.loads) Return the reconstituted object hierarchy of the pickled representation data of an object. data must be a [bytes-like object](../glossary.html#term-bytes-like-object). The protocol version of the pickle is detected automatically, so no protocol argument is needed. Bytes past the pickled representation of the object are ignored. Arguments fix_imports, encoding, errors, strict and buffers have the same meaning as in the [constructor.](#pickle.Unpickler) Unpickler Changed in version 3.8: The buffers argument was added. The [ module defines three exceptions: pickle](#module-pickle) - exception pickle.PickleError [\u00b6](#pickle.PickleError) Common base class for the other pickling exceptions. It inherits [.](exceptions.html#Exception) Exception - exception pickle.PicklingError [\u00b6](#pickle.PicklingError) Error raised when an unpicklable object is encountered by [. It inherits](#pickle.Pickler) Pickler [.](#pickle.PickleError) PickleError Refer to [What can be pickled and unpickled?](#pickle-picklable)to learn what kinds of objects can be pickled. - exception pickle.UnpicklingError [\u00b6](#pickle.UnpicklingError) Error raised when there is a problem unpickling an object, such as a data corruption or a security violation. It inherits [.](#pickle.PickleError) PickleError Note that other exceptions may also be raised during unpickling, including (but not necessarily limited to) AttributeError, EOFError, ImportError, and IndexError. The [\u00b6](#pickle.Pickler) This takes a binary file for writing a pickle data stream. The optional protocol argument, an integer, tells the pickler to use the given protocol; supported protocols are 0 to [. If not specified, the default is](#pickle.HIGHEST_PROTOCOL) HIGHEST_PROTOCOL [. If a negative number is specified,](#pickle.DEFAULT_PROTOCOL) DEFAULT_PROTOCOL [is selected.](#pickle.HIGHEST_PROTOCOL) HIGHEST_PROTOCOL The file argument must have a write() method that accepts a single bytes argument. It can thus be an on-disk file opened for binary writing, an [instance, or any other custom object that meets this interface.](io.html#io.BytesIO) io.BytesIO If fix_imports is true and protocol is less than 3, pickle will try to map the new Python 3 names to the old module names used in Python 2, so that the pickle data stream is readable with Python 2. If buffer_callback is None (the default), buffer views are serialized into file as part of the pickle stream. If buffer_callback is not None, then it can be called any number of times with a buffer view. If the callback returns a false value (such as None), the given buffer is [out-of-band](#pickle-oob); otherwise the buffer is serialized in-band, i.e. inside the pickle stream. It is an error if buffer_callback is not None and protocol is None or smaller than 5. Changed in version 3.8: The buffer_callback argument was added. - dump(obj) [\u00b6](#pickle.Pickler.dump) Write the pickled representation of obj to the open file object given in the constructor. - persistent_id(obj) [\u00b6](#pickle.Pickler.persistent_id) Do nothing by default. This exists so a subclass can override it. If [returns](#pickle.Pickler.persistent_id) persistent_id() None, obj is pickled as usual. Any other value causes [to emit the returned value as a persistent ID for obj. The meaning of this persistent ID should be defined by](#pickle.Pickler) Pickler [. Note that the value returned by](#pickle.Unpickler.persistent_load) Unpickler.persistent_load() [cannot itself have a persistent ID.](#pickle.Pickler.persistent_id) persistent_id() See [Persistence of External Objects](#pickle-persistent)for details and examples of uses. - dispatch_table [\u00b6](#pickle.Pickler.dispatch_table) A pickler object's dispatch table is a registry of reduction functions of the kind which can be declared using [. It is a mapping whose keys are classes and whose values are reduction functions. A reduction function takes a single argument of the associated class and should conform to the same interface as a](copyreg.html#copyreg.pickle) copyreg.pickle() __reduce__()method. By default, a pickler object will not have a [attribute, and it will instead use the global dispatch table managed by the](#pickle.Pickler.dispatch_table) dispatch_table [module. However, to customize the pickling for pickler object one can set the](copyreg.html#module-copyreg) copyreg [attribute to [has a](#pickle.Pickler) Pickler [attribute then this will be used as the default dispatch table for instances of that class.](#pickle.Pickler.dispatch_table) dispatch_table See [Dispatch Tables](#pickle-dispatch)for usage examples. New in version 3.3. - reducer_override(obj) [\u00b6](#pickle.Pickler.reducer_override) Special reducer that can be defined in [subclasses. This method has priority over any reducer in the](#pickle.Pickler) Pickler [. It should conform to the same interface as a](#pickle.Pickler.dispatch_table) dispatch_table __reduce__()method, and For a detailed example, see [Custom Reduction for Types, Functions, and Other Objects](#reducer-override). New in version 3.8. - fast [\u00b6](#pickle.Pickler.fast) Deprecated. Enable fast mode if set to a true value. The fast mode disables the usage of memo, therefore speeding the pickling process by not generating superfluous PUT opcodes. It should not be used with self-referential objects, doing otherwise will cause [to recurse infinitely.](#pickle.Pickler) Pickler [if you buffers=None) [\u00b6](#pickle.Unpickler) This takes a binary file for reading a pickle data stream. The protocol version of the pickle is detected automatically, so no protocol argument is needed. The argument file must have three methods, a read() method that takes an integer argument, a readinto() method that takes a buffer argument and a readline() method that requires no arguments, as in the [interface. Thus file can be an on-disk file opened for binary reading, an](io.html#io.BufferedIOBase) io.BufferedIOBase [object, or any other custom object that meets this interface.](io.html#io.BytesIO) io.BytesIO The optional arguments fix_imports, encoding and errors are used to control compatibility support for pickle stream generated by Python 2. If fix_imports is true, pickle will try to map the old Python 2 names to the new names used in Python 3. The encoding and errors tell pickle how to decode 8-bit string instances pickled by Python 2; these default to 'ASCII' and 'strict', respectively. The encoding can be 'bytes' to read these 8-bit string instances as bytes objects. Using encoding='latin1'is required for unpickling NumPy arrays and by Python 2.](datetime.html#datetime.time) time If buffers is None (the default), then all data necessary for deserialization must be contained in the pickle stream. This means that the buffer_callback argument was None when a [was instantiated [or](#pickle.dump) dump() [was called).](#pickle.dumps) dumps() buffers is not None, it should be an iterable of buffer-enabled objects that is consumed each time the pickle stream references an [out-of-band](#pickle-oob)buffer view. Such buffers have been given in order to the buffer_callback of a Pickler object. Changed in version 3.8: The buffers argument was added. - load() [\u00b6](#pickle.Unpickler.load) Read the pickled representation of an object from the open file object given in the constructor, and return the reconstituted object hierarchy specified therein. Bytes past the pickled representation of the object are ignored. - persistent_load(pid) [\u00b6](#pickle.Unpickler.persistent_load) Raise an [by default.](#pickle.UnpicklingError) UnpicklingError If defined, [should return the object specified by the persistent ID pid. If an invalid persistent ID is encountered, an](#pickle.Unpickler.persistent_load) persistent_load() [should be raised.](#pickle.UnpicklingError) UnpicklingError See [Persistence of External details and examples of uses. - find_class(module, name) [\u00b6](#pickle.Unpickler.find_class) Import module if necessary and return the object called name from it, where the module and name arguments are [objects. Note, unlike its name suggests,](stdtypes.html#str) str [is also used for finding functions.](#pickle.Unpickler.find_class) find_class() Subclasses may override this to gain control over what type of objects and how they can be loaded, potentially reducing security risks. Refer to [Restricting Globals](#pickle-restrict)for details. Raises an [auditing event](sys.html#auditing) pickle.find_classwith arguments module, name. - load() - class pickle.PickleBuffer(buffer) [\u00b6](#pickle.PickleBuffer) A wrapper for a buffer representing picklable data. buffer must be a [buffer-providing](../c-api/buffer.html#bufferobjects)object, such as a [bytes-like object](../glossary.html#term-bytes-like-object)or a N-dimensional array. [is itself a buffer provider, therefore it is possible to pass it to other APIs expecting a buffer-providing object, such as](#pickle.PickleBuffer) PickleBuffer [.](stdtypes.html#memoryview) memoryview [objects can only be serialized using pickle protocol 5 or higher. They are eligible for](#pickle.PickleBuffer) PickleBuffer [out-of-band serialization](#pickle-oob). New in version 3.8. - raw() [\u00b6](#pickle.PickleBuffer.raw) Return a [of the memory area underlying this buffer. The returned object is a one-dimensional, C-contiguous memoryview with format](stdtypes.html#memoryview) memoryview B(unsigned bytes). [is the buffer is neither C- nor Fortran-contiguous.](exceptions.html#BufferError) BufferError - release() [\u00b6](#pickle.PickleBuffer.release) Release the underlying buffer exposed by the PickleBuffer object. - raw() What can be pickled and unpickled? [\u00b6](#what-can-be-pickled-and-unpickled) The following types can be pickled: built-in constants ( None, True, False, Ellipsis, and floating-point numbers, complex numbers; strings, bytes, tuples, sets, dictionaries containing only picklable objects; functions (built-in and user-defined) accessible from the top level of a module (using [, not](../reference/compound_stmts.html#def) def [);](../reference/expressions.html#lambda) lambda classes accessible from the top level of a module; instances of such classes whose the result of calling __getstate__()is picklable (see section [Pickling Class Instances](#pickle-inst)for details). Attempts to pickle unpicklable objects will raise the [ exception; when this happens, an unspecified number of bytes may have already been written to the underlying file. Trying to pickle a highly recursive data structure may exceed the maximum recursion depth, a PicklingError](#pickle.PicklingError) [will be raised in this case. You can carefully raise this limit with](exceptions.html#RecursionError) RecursionError [.](sys.html#sys.setrecursionlimit) sys.setrecursionlimit() Note that functions (built-in and user-defined) pickled by fully [qualified name](../glossary.html#term-qualified-name), not by value. [2](#id8) This means that only the function name is pickled, along with the name of the containing module and classes. Neither the function's code, nor any of its function attributes are pickled. Thus the defining module must be importable in the unpickling environment, and the module must contain the named object, otherwise an exception will be raised. [3](#id9) Similarly, classes are pickled by fully qualified name, so the same restrictions in the unpickling environment apply. Note that none of the class's code or data is pickled, so in the following example the class attribute attr is not restored in the unpickling environment: = 'A pickle.dumps(Foo) These restrictions are why picklable functions and classes must be defined at the top level of a module. Similarly, when class instances are pickled, their class's code and data are not pickled along with them. Only the instance data are pickled. This is done on purpose, so you can fix bugs in a class or add methods to the class and still load objects that were created with an earlier version of the class. If you plan to have long-lived objects that will see many versions of a class, it may be worthwhile to put a version number in the objects so that suitable conversions can be made by the class's __setstate__() method. Pickling Class Instances [\u00b6](#pickling-class-instances) In this section, we describe the general mechanisms available to you to define, customize, and control how class instances are pickled and unpickled. In most cases, no additional code is needed to make instances picklable. By default, pickle will retrieve the class and the attributes of an instance via introspection. When a class instance is unpickled, its __init__() method is usually not invoked. The default behaviour first creates an uninitialized instance and then restores the saved attributes. The following code shows an implementation of this Classes can alter the default behaviour by providing one or several special methods: - object.__getnewargs_ex__() [\u00b6](#object.__getnewargs_ex__) In protocols 2 and newer, classes that implements the [method can dictate the values passed to the](#object.__getnewargs_ex__) __getnewargs_ex__() [method upon unpickling. (args, kwargs)where args is a tuple of positional arguments and kwargs a dictionary of named arguments for constructing the object. Those will be passed to the [method upon unpickling.](../reference/datamodel.html#object.__new__) __new__() You should implement this method if the [method of your class requires keyword-only arguments. Otherwise, it is recommended for compatibility to implement](../reference/datamodel.html#object.__new__) __new__() [.](#object.__getnewargs__) __getnewargs__() Changed in version 3.6: [is protocols 2 and 3.](#object.__getnewargs_ex__) __getnewargs_ex__() - object.__getnewargs__() [\u00b6](#object.__getnewargs__) This method serves a similar purpose as [, but supports only positional arguments. It must return a tuple of arguments](#object.__getnewargs_ex__) __getnewargs_ex__() argswhich will be passed to instead of](#object.__getnewargs__) 2 and 3.](#object.__getnewargs_ex__) __getnewargs_ex__() - object.__getstate__() [\u00b6](#object.__getstate__) Classes can further influence how their instances are pickled by overriding the method [. It is called and the returned object is pickled as the contents for the instance, instead of a default state. There are several cases:](#object.__getstate__) __getstate__() For a class that has no instance [and no](stdtypes.html#object.__dict__) __dict__ [, the default state is](../reference/datamodel.html#object.__slots__) __slots__ None. For a class that has an instance [and no](stdtypes.html#object.__dict__) __dict__ [, the default state is](../reference/datamodel.html#object.__slots__) __slots__ self.__dict__. For a class that has an instance [and](stdtypes.html#object.__dict__) __dict__ [, the default state is a tuple consisting of two dictionaries:](../reference/datamodel.html#object.__slots__) __slots__ self.__dict__, and a dictionary mapping slot names to slot values. Only slots that have a value are included in the latter. For a class that has [and no instance](../reference/datamodel.html#object.__slots__) __slots__ [, the default state is a tuple whose first item is](stdtypes.html#object.__dict__) __dict__ Noneand whose second item is a dictionary mapping slot names to slot values described in the previous bullet. Changed in version 3.11: Added the default implementation of the __getstate__()method in the [class.](functions.html#object) object - - object.__setstate__(state) [\u00b6](#object.__setstate__) Upon unpickling, if the class defines [, it is called with the unpickled state. In that case, there is no requirement for the state object to be a dictionary. Otherwise, the pickled state must be a dictionary and its items are assigned to the new instance's dictionary.](#object.__setstate__) __setstate__() Note If [returns a false value, [method will not be called upon unpickling.](#object.__setstate__) __setstate__() Refer to the section [Handling Stateful Objects](#pickle-state) for more information about how to use the methods __getstate__() and __setstate__(). Note At unpickling time, some methods like __getattr__(), __getattribute__(), or __setattr__() may be called upon the instance. In case those methods rely on some internal invariant being true, the type should implement __new__() to establish such an invariant, as __init__() is not called when unpickling an instance. As we shall see, pickle does not use directly the methods described above. In fact, these methods are part of the copy protocol which implements the __reduce__() special method. The copy protocol provides a unified interface for retrieving the data necessary for pickling and copying objects. [4](#id10) Although powerful, implementing __reduce__() directly in your classes is error prone. For this reason, class designers should use the high-level interface (i.e., __getnewargs_ex__(), __getstate__() and __setstate__()) whenever possible. We will show, however, cases where using __reduce__() is the only option or leads to more efficient pickling or both. - object.__reduce__() [\u00b6](#object.__reduce__) The interface is currently defined as follows. The [method takes no argument and shall return either a string or preferably a tuple (the returned object is often referred to as the \"reduce value\").](#object.__reduce__) __reduce__() If a string is returned, the string should be interpreted as the name of a global variable. It should be the object's local name relative to its module; the pickle module searches the module namespace to determine the object's module. This behaviour is typically useful for singletons. When a tuple is returned, it must be between two and six items long. Optional items can either be omitted, or Nonecan be provided as their value. The semantics of each item are in order: A callable object that will be called to create the initial version of the object. A tuple of arguments for the callable object. An empty tuple must be given if the callable does not accept any argument. Optionally, the object's state, which will be passed to the object's [method as previously described. If the object has no such method then, the value must be a dictionary and it will be added to the object's](#object.__setstate__) __setstate__() [attribute.](stdtypes.html#object.__dict__) __dict__ Optionally, an iterator (and not a sequence) yielding successive items. These items will be appended to the object either using obj.append(item)or, in batch, using obj.extend(list_of_items). This is primarily used for list subclasses, but may be used by other classes as long as they have append()and extend()methods with the appropriate signature. (Whether append()or extend()is used depends on which pickle protocol version is used as well as the number of items to append, so both must be supported.) Optionally, an iterator (not a sequence) yielding successive key-value pairs. These items will be stored to the object using obj[key] = value. This is primarily used for dictionary subclasses, but may be used by other classes as long as they implement [.](../reference/datamodel.html#object.__setitem__) __setitem__() Optionally, a callable with a (obj, state)signature. This callable allows the user to programmatically control the state-updating behavior of a specific object, instead of using obj's static [method. If not](#object.__setstate__) __setstate__() None, this callable will have priority over obj's [.](#object.__setstate__) __setstate__() New in version 3.8: The optional sixth tuple item, (obj, state), was added. - - object.__reduce_ex__(protocol) [\u00b6](#object.__reduce_ex__) Alternatively, a [method may be defined. The only difference is this method should take a single integer argument, the protocol version. When defined, pickle will prefer it over the](#object.__reduce_ex__) __reduce_ex__() [method. In addition,](#object.__reduce__) __reduce__() [automatically becomes a synonym for the extended version. The main use for this method is to provide backwards-compatible reduce values for older Python releases.](#object.__reduce__) __reduce__() Persistence of External Objects [\u00b6](#persistence-of-external-objects) For the benefit of object persistence, the [ module supports the notion of a reference to an object outside the pickled data stream. Such objects are referenced by a persistent ID, which should be either a string of alphanumeric characters (for protocol 0) pickle](#module-pickle) [5](#id11)or just an arbitrary object (for any newer protocol). The resolution of such persistent IDs is not defined by the [ module; it will delegate this resolution to the user-defined methods the pickler and unpickler, pickle](#module-pickle) [and](#pickle.Pickler.persistent_id) persistent_id() [respectively.](#pickle.Unpickler.persistent_load) persistent_load() To pickle objects that have an external persistent ID, the pickler must have a custom [ method that takes an object as an argument and returns either persistent_id()](#pickle.Pickler.persistent_id) Noneor the persistent ID for that object. When Noneis returned, the pickler simply pickles the object as normal. When a persistent ID string is returned, the pickler will pickle that object, along with a marker so that the unpickler will recognize it as a persistent ID. To unpickle external objects, the unpickler must have a custom [ method that takes a persistent ID object and returns the referenced object. persistent_load()](#pickle.Unpickler.persistent_load) Here is a comprehensive example presenting how persistent ID can be used to pickle external objects by reference. # Simple example presenting how persistent ID can be used to pickle # external objects by reference. import pickle import sqlite3 from collections import namedtuple # Simple class representing a record in our database. = namedtuple(\"MemoRecord\", \"key, MemoRecord as a regular class instance, we emit a # persistent ID. if isinstance(obj, MemoRecord): # Here, our persistent ID is simply a tuple, containing a tag and a # key, which refers to a specific record in the database. return (\"MemoRecord\", obj.key) else: # If obj does not have a persistent ID, return None. This means obj # needs to be pickled as usual. return None class DBUnpickler(pickle.Unpickler): def pid): # This method is invoked whenever a persistent ID is encountered. # Here, pid is the tuple returned by DBPickler. cursor \"MemoRecord\": # Fetch the referenced record from the database and return it. cursor.execute(\"SELECT * FROM memos WHERE key=?\", (str(key_id),)) key, task = cursor.fetchone() return MemoRecord(key, task) else: # Always raises an error if you cannot return the correct object. # Otherwise, the unpickler will think None is the object referenced # by the persistent ID. raise pickle.UnpicklingError(\"unsupported persistent object\") def main(): import io import pprint # Initialize and our database. conn = sqlite3.connect(\":memory:\") cursor = conn.cursor() cursor.execute(\"CREATE TABLE memos(key INTEGER PRIMARY 'give tasks: cursor.execute(\"INSERT INTO memos VALUES(NULL, ?)\", (task,)) # Fetch the records to be pickled. cursor.execute(\"SELECT * FROM memos\") memos = [MemoRecord(key, task) for key, task in cursor] # Save the records using our custom DBPickler. file = io.BytesIO() DBPickler(file).dump(memos) print(\"Pickled records:\") pprint.pprint(memos) # Update a record, just good measure. cursor.execute(\"UPDATE memos SET task='learn italian' WHERE key=1\") # Load the records from the pickle data stream. file.seek(0) memos If one wants to customize pickling of some classes without disturbing any other code which depends on pickling, then one can create a pickler with a private dispatch table. The global dispatch table managed by the [ module is available as copyreg](copyreg.html#module-copyreg) copyreg.dispatch_table. Therefore, one may choose to use a modified copy of copyreg.dispatch_tableas a private dispatch table. For example f = io.BytesIO() p = pickle.Pickler(f) p.dispatch_table = copyreg.dispatch_table.copy() p.dispatch_table[SomeClass] = reduce_SomeClass creates an instance of [ with a private dispatch table which handles the pickle.Pickler](#pickle.Pickler) SomeClassclass specially. Alternatively, the code class MyPickler(pickle.Pickler): dispatch_table = dispatch_table[SomeClass] = reduce_SomeClass f = io.BytesIO() p = MyPickler(f) does the same but all instances of MyPickler will by default share the private dispatch table. On the other hand, the code copyreg.pickle(SomeClass, reduce_SomeClass) f = io.BytesIO() p = pickle.Pickler(f) modifies the global dispatch table shared by all users of the [ module. copyreg](copyreg.html#module-copyreg) Handling Stateful Objects [\u00b6](#handling-stateful-objects) Here's an example that shows how to modify pickling behavior for a class. The TextReader class opens a text file, and returns the line number and line contents each time its readline() method is called. If a TextReader instance is pickled, all attributes except the file object member are saved. When the instance is unpickled, the file is reopened, and reading resumes from the last location. The __setstate__() and __getstate__() methods are used to implement this behavior. class TextReader: \"\"\"Print and number lines in self.file.readline() if not None if line.endswith('\\n'): line return \"%i: % (self.lineno, __getstate__(self): # Copy the object's state from self.__dict__ which contains # all our instance attributes. Always use the dict.copy() # method to avoid modifying the original state. state = self.__dict__.copy() # Remove the unpicklable entries. del state['file'] return state def __setstate__(self, state): # Restore instance attributes (i.e., filename and lineno). self.__dict__.update(state) # Restore the previously opened file's state. To do so, we need to # reopen it and read from it until the line count is restored. file = open(self.filename) for _ in range(self.lineno): file.readline() # Finally, save the file. self.file = file A sample usage might be something like this: >>> for Types, Functions, and Other Objects [\u00b6](#custom-reduction-for-types-functions-and-other-objects) New in version 3.8. Sometimes, [ may not be flexible enough. In particular we may want to customize pickling based on another criterion than the object's type, or we may want to customize the pickling of functions and classes. dispatch_table](#pickle.Pickler.dispatch_table) For those cases, it is possible to subclass from the [ class and implement a Pickler](#pickle.Pickler) [method. This method can return an arbitrary reduction tuple (see](#pickle.Pickler.reducer_override) reducer_override() __reduce__()). It can alternatively return NotImplementedto fallback to the traditional behavior. If both the [ dispatch_table](#pickle.Pickler.dispatch_table) [are defined, then](#pickle.Pickler.reducer_override) reducer_override() [method takes priority.](#pickle.Pickler.reducer_override) reducer_override() Note For performance reasons, [ may not be called for the following objects: reducer_override()](#pickle.Pickler.reducer_override) None, True, False, and exact instances of is a simple example where we allow pickling and reconstructing a given class: import io import pickle class MyClass: # any other object, fallback to usual reduction return NotImplemented f = io.BytesIO() p MyPickler(f) p.dump(MyClass) in version 3.8. In some contexts, the [ module is used to transfer massive amounts of data. Therefore, it can be important to minimize the number of memory copies, to preserve performance and resource consumption. However, normal operation of the pickle](#module-pickle) [module, as it transforms a graph-like structure of objects into a sequential stream of bytes, intrinsically involves copying data to and from the pickle stream.](#module-pickle) pickle This constraint can be eschewed if both the provider (the implementation of the object types to be transferred) and the consumer (the implementation of the communications system) support the out-of-band transfer facilities provided by pickle protocol 5 and higher. Provider API [\u00b6](#provider-api) The large data objects to be pickled must implement a __reduce_ex__() method specialized for protocol 5 and higher, which returns a [ instance (instead of e.g. a PickleBuffer](#pickle.PickleBuffer) [object) for any large data.](stdtypes.html#bytes) bytes A [ object signals that the underlying buffer is eligible for out-of-band data transfer. Those objects remain compatible with normal usage of the PickleBuffer](#pickle.PickleBuffer) [module. However, consumers can also opt-in to tell](#module-pickle) pickle [that they will handle those buffers by themselves.](#module-pickle) pickle Consumer API [\u00b6](#consumer-api) A communications system can enable custom handling of the [ objects generated when serializing an object graph. PickleBuffer](#pickle.PickleBuffer) On the sending side, it needs to pass a buffer_callback argument to [ (or to the Pickler](#pickle.Pickler) [or](#pickle.dump) dump() [function), which will be called with each](#pickle.dumps) dumps() [generated while pickling the object graph. Buffers accumulated by the buffer_callback will not see their data copied into the pickle stream, only a cheap marker will be inserted.](#pickle.PickleBuffer) PickleBuffer On the receiving side, it needs to pass a buffers argument to [ (or to the Unpickler](#pickle.Unpickler) [or](#pickle.load) load() [function), which is an iterable of the buffers which were passed to buffer_callback. That iterable should produce buffers in the same order as they were passed to buffer_callback. Those buffers will provide the data expected by the reconstructors of the objects whose pickling produced the original](#pickle.loads) loads() [objects.](#pickle.PickleBuffer) PickleBuffer Between the sending side and the receiving side, the communications system is free to implement its own transfer mechanism for out-of-band buffers. Potential optimizations include the use of shared memory or datatype-dependent compression. Example [\u00b6](#example) Here is a trivial example where we implement a [ subclass able to participate in out-of-band buffer else: # PickleBuffer is as m: Get a handle over the original buffer object obj = m.obj if type(obj) is cls: # Original buffer object is a ZeroCopyByteArray, return it # as-is. return obj else: return cls(obj) The reconstructor (the _reconstruct class method) returns the buffer's providing object if it has the right type. This is an easy way to simulate zero-copy behaviour on this toy example. On the consumer side, we can pickle those objects the usual way, which when unserialized will give us a copy of the original object: b = ZeroCopyByteArray(b\"abc\") new_b) # False: a copy was made But if we pass a buffer_callback and then give back the accumulated buffers when unserializing, we are able to get back the original object: b = ZeroCopyByteArray(b\"abc\") buffers = new_b) # True: no copy was made This example is limited by the fact that [ allocates its own memory: you cannot create a bytearray](stdtypes.html#bytearray) [instance that is backed by another object's memory. However, third-party datatypes such as NumPy arrays do not have this limitation, and allow use of zero-copy pickling (or making as few copies as possible) when transferring between distinct processes or systems.](stdtypes.html#bytearray) bytearray See also [PEP 574](https://peps.python.org/pep-0574/) - Pickle protocol 5 with out-of-band data Restricting Globals [\u00b6](#restricting-globals) By default, unpickling will import any class or function that it finds in the pickle data. For many applications, this behaviour is unacceptable as it permits the unpickler to import and invoke arbitrary code. Just consider what this hand-crafted pickle data stream does when loaded: >>> import pickle >>> pickle.loads(b\"cos\\nsystem\\n(S'echo hello world'\\ntR.\") hello world 0 In this example, the unpickler imports the [ function and then apply the string argument \"echo hello world\". Although this example is inoffensive, it is not difficult to imagine one that could damage your system. os.system()](os.html#os.system) For this reason, you may want to control what gets unpickled by customizing [. Unlike its name suggests, Unpickler.find_class()](#pickle.Unpickler.find_class) [is called whenever a global (i.e., a class or a function) is requested. Thus it is possible to either completely forbid globals or restrict them to a safe subset.](#pickle.Unpickler.find_class) Unpickler.find_class() Here is an example of an unpickler allowing only few safe classes from the [ module to be loaded: builtins](builtins.html#module-builtins) import builtins import io allow safe classes from builtins. if module == \"builtins\" and name in safe_builtins: return getattr(builtins, name) # Forbid everything else. raise pickle.UnpicklingError(\"global '%s.%s' is forbidden\" % (module, name)) def restricted_loads(s): \"\"\"Helper function analogous to pickle.loads().\"\"\" return RestrictedUnpickler(io.BytesIO(s)).load() A usage of our unpickler pickle.UnpicklingError: global 'builtins.eval' is forbidden As our examples shows, you have to be careful with what you allow to be unpickled. Therefore if security is a concern, you may want to consider alternatives such as the marshalling API in [ or third-party solutions. xmlrpc.client](xmlrpc.client.html#module-xmlrpc.client) Performance [\u00b6](#performance) Recent versions of the pickle protocol (from protocol 2 and upwards) feature efficient binary encodings for several common features and built-in types. Also, the [ module has a transparent optimizer written in C. pickle](#module-pickle) Examples [\u00b6](#examples) For the simplest code, use the [ and dump()](#pickle.dump) [functions.](#pickle.load) load() import pickle # An arbitrary collection of objects supported by pickle. data = { f: # Pickle the 'data' dictionary using the highest protocol available. pickle.dump(data, f, pickle.HIGHEST_PROTOCOL) The following example reads the resulting pickled data. import pickle with open('data.pickle', 'rb') as f: # The protocol version used is detected automatically, so we do not # have to specify it. data = pickle.load(f) See also - Module copyreg Pickle interface constructor registration for extension types. - Module pickletools Tools for working with and analyzing pickled data. - Module shelve Indexed databases of objects; uses [.](#module-pickle) pickle - Module copy Shallow and deep object copying. - Module marshal High-performance serialization of built-in types. Footnotes [1](#id1) Don't confuse this with the [module](marshal.html#module-marshal) marshal [2](#id3) This is why [functions cannot be lambda lambdafunctions share the same name: <lambda>. [3](#id4) raised will likely be an ImportError [but it could be something else.](exceptions.html#AttributeError) AttributeError [4](#id5) The [module uses this protocol for shallow and deep copying operations.](copy.html#module-copy) copy [5](#id6) The limitation on alphanumeric characters is due to the fact that persistent IDs in protocol 0 are delimited by the newline character. Therefore if any kind of newline characters occurs in persistent IDs, the resulting pickled data "}