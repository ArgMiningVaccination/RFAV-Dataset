{"title": "Videotutorial Antipatrones de dise\u00f1o - Arquitectura de software: Patrones esencial | LinkedIn Learning, antes Lynda.com", "author": null, "url": "https://es.linkedin.com/learning/arquitectura-de-software-patrones-esencial/antipatrones-de-diseno", "hostname": "linkedin.com", "description": "Tal y como existen los patrones de dise\u00f1o de arquitectura, tenemos a los antipatrones, que son malas pr\u00e1cticas aplicadas sistem\u00e1ticamente a la arquitectura de software.", "sitename": "LinkedIn", "date": "2021-04-20", "cleaned_text": "Del curso: [Arquitectura de software: Patrones esencial](https://es.linkedin.com/learning/arquitectura-de-software-patrones-esencial?trk=course_title) de software: Patrones esencial](https://es.linkedin.com/learning/arquitectura-de-software-patrones-esencial?trk=course_title) Antipatrones de dise\u00f1o Los patrones de dise\u00f1o nos permiten crear un marco com\u00fan de reglas y lineamientos generales de desarrollo, mejoran la velocidad del trabajo y hasta previenen posibles errores antes de que ocurran. Pero todo esto viene con un precio. Debes apegarte al patr\u00f3n y seguir sus reglas. De lo contrario, comenzar\u00e1s a cambiar las cosas, introducir tus propias reglas y eventualmente terminar\u00e1s con algo totalmente distinto. As\u00ed es como nacen los antipatrones que, al igual que los patrones de dise\u00f1o, son soluciones comunes para un problema. Pero en este caso, el resultado arroja consecuencias negativas. Los antipatrones aparecen generalmente cuando los arquitectos no tienen suficiente conocimiento o experiencia resolviendo un problema, cuando desconocen el concepto de patrones de dise\u00f1o o cuando comienzan a aplicar correctamente un patr\u00f3n de dise\u00f1o pero se implementa mal o se usa en el contexto incorrecto. En muchos casos, un patr\u00f3n de dise\u00f1o perfectamente v\u00e1lido puede evolucionar a un antipatr\u00f3n. Esto ocurre por varios motivos, como cambios en los lenguajes de programaci\u00f3n o en los paradigmas dominantes. Por ejemplo, en los a\u00f1os 60 y 70, la programaci\u00f3n procedural era un patr\u00f3n de dise\u00f1o totalmente aceptado y hasta recomendado. Hoy en d\u00eda, es casi imposible encontrar una aplicaci\u00f3n profesional que se base en programaci\u00f3n procedural y en las universidades se ense\u00f1a como un antipatr\u00f3n. Al momento de crear este curso, la programaci\u00f3n orientada a objetos es un patr\u00f3n extremadamente com\u00fan, pero comienza a envejecer y muchos desarrolladores comienzan a cuestionarse si debemos seguir trabajando as\u00ed o decantarnos por otras opciones, como la programaci\u00f3n funcional. Uno de los antipatrones m\u00e1s comunes es el llamado la navaja suiza. Cuando se intentan crear estructuras, como por ejemplo una interfaz de clase, extremadamente complejas, tratando de abarcar todos los usos posibles y el resultado es una estructura extremadamente r\u00edgida. Este patr\u00f3n crea estructuras fr\u00e1giles, porque se centralizan demasiadas tareas en el mismo lugar. Si una peque\u00f1a parte falla, es f\u00e1cil que caiga todo el sistema. Tambi\u00e9n est\u00e1 el dise\u00f1o por comit\u00e9, cuando hay demasiadas personas con intereses distintos involucradas en el proceso de dise\u00f1o. Esto produce una arquitectura extremadamente compleja con poca o ninguna coherencia. Este tipo de arquitectura termina muy comprometida por agradar intereses distintos, sobrecomplicando elementos cruciales, ignorando los temas menos populares como la seguridad y muchas veces perdiendo el objetivo principal de crear una soluci\u00f3n funcional. El martillo dorado es otro antipatr\u00f3n com\u00fan y le ocurre principalmente a los arquitectos m\u00e1s experimentados. Se trata de que una vez que un patr\u00f3n da buenos resultados en un par de proyectos, se convierte poco a poco en la \u00fanica soluci\u00f3n posible. Sin importar las necesidades de conectividad, de escalabilidad o recursos de proyecto, los arquitectos siempre usar\u00e1n su martillo dorado para todos los casos. Este antipatr\u00f3n hace que soluciones perfectamente v\u00e1lidas y correctas sean utilizadas en el contexto incorrecto, lo que producir\u00e1 resultados inconsistentes. En algunos casos, tendremos buenos resultados, pero en otros no. Es como tratar de construir una casa, un barco y un cohete con la misma herramienta. No siempre funcionar\u00e1. Para prevenir esto y la mayor\u00eda de antipatrones, la mejor vacuna que un arquitecto puede tomar es investigar constantemente. Existen cientos de patrones y variaciones que pueden ayudarnos, y solo el an\u00e1lisis constante nos puede guiar para encontrar el que mejor se ajuste a cada proyecto. Practica mientras aprendes con los archivos de ejercicios. Descarga los archivos que el instructor utiliza para ense\u00f1ar el curso. Sigue las instrucciones y aprende viendo, escuchando y practicando. Contenido - - - - - C\u00f3mo es la arquitectura monol\u00edtica3 min 17 s - Qu\u00e9 es la arquitectura de microservicios3 min 50 s - C\u00f3mo es la arquitectura de microkernels4 min 26 s - Qu\u00e9 es la arquitectura en capas m\u00faltiples5 min 45 s - La arquitectura basada en espacio4 min 51 s - La arquitectura dirigida por eventos6 min 6 s - El Modelo Vista Controlador3 min 46 s - - "}